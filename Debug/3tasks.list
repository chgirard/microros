
3tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b80  08009b80  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b88  08009b88  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08009c00  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08009ca0  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000053a4  200001b0  08009d40  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005554  08009d40  00025554  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 15 .debug_info   000240b4  00000000  00000000  00020223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000043ea  00000000  00000000  000442d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001c28  00000000  00000000  000486c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001606  00000000  00000000  0004a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00004719  00000000  00000000  0004b8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00021f36  00000000  00000000  0005000f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010505b  00000000  00000000  00071f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007b98  00000000  00000000  00176fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  0017eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a80 	.word	0x08009a80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08009a80 	.word	0x08009a80

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 f875 	bl	80015fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f856 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fa0a 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f9e2 	bl	80008e4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f982 	bl	8000828 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f9b0 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000528:	f000 f902 	bl	8000730 <MX_SPI1_Init>
  MX_ETH_Init();
 800052c:	f000 f8b2 	bl	8000694 <MX_ETH_Init>
  MX_SPI2_Init();
 8000530:	f000 f93c 	bl	80007ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	4816      	ldr	r0, [pc, #88]	; (8000594 <main+0x88>)
 800053a:	f002 f9e1 	bl	8002900 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <main+0x88>)
 8000544:	f002 f9dc 	bl	8002900 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f005 fd9e 	bl	8006088 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 1, &myBinarySem_attributes);
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <main+0x8c>)
 800054e:	2101      	movs	r1, #1
 8000550:	2001      	movs	r0, #1
 8000552:	f005 fed7 	bl	8006304 <osSemaphoreNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <main+0x90>)
 800055a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Enable */
  EnableHandle = osThreadNew(StartEnable, NULL, &Enable_attributes);
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <main+0x94>)
 800055e:	2100      	movs	r1, #0
 8000560:	4810      	ldr	r0, [pc, #64]	; (80005a4 <main+0x98>)
 8000562:	f005 fdfb 	bl	800615c <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <main+0x9c>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of Init */
  InitHandle = osThreadNew(StartInit, NULL, &Init_attributes);
 800056c:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <main+0xa0>)
 800056e:	2100      	movs	r1, #0
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <main+0xa4>)
 8000572:	f005 fdf3 	bl	800615c <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <main+0xa8>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of Test */
  //TestHandle = osThreadNew(StartTest, NULL, &Test_attributes);

  /* creation of Update */
  UpdateHandle = osThreadNew(StartUpdate, NULL, &Update_attributes);
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <main+0xac>)
 800057e:	2100      	movs	r1, #0
 8000580:	480e      	ldr	r0, [pc, #56]	; (80005bc <main+0xb0>)
 8000582:	f005 fdeb 	bl	800615c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <main+0xb4>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f005 fdb0 	bl	80060f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x84>
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	08009b40 	.word	0x08009b40
 800059c:	200009d8 	.word	0x200009d8
 80005a0:	08009ad4 	.word	0x08009ad4
 80005a4:	08000a75 	.word	0x08000a75
 80005a8:	200009cc 	.word	0x200009cc
 80005ac:	08009af8 	.word	0x08009af8
 80005b0:	08000b45 	.word	0x08000b45
 80005b4:	200009d0 	.word	0x200009d0
 80005b8:	08009b1c 	.word	0x08009b1c
 80005bc:	08000c65 	.word	0x08000c65
 80005c0:	200009d4 	.word	0x200009d4

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f009 f96a 	bl	80098ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e8:	f002 faec 	bl	8002bc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <SystemClock_Config+0xc8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xcc>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000638:	2348      	movs	r3, #72	; 0x48
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000640:	2303      	movs	r3, #3
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 facb 	bl	8002be4 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 fc00 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fd59 	bl	800312c <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000680:	f000 fbea 	bl	8000e58 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_ETH_Init+0x84>)
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <MX_ETH_Init+0x88>)
 800069c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_ETH_Init+0x8c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_ETH_Init+0x8c>)
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ETH_Init+0x8c>)
 80006ac:	22e1      	movs	r2, #225	; 0xe1
 80006ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_ETH_Init+0x8c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ETH_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_ETH_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_ETH_Init+0x84>)
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <MX_ETH_Init+0x8c>)
 80006c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_ETH_Init+0x84>)
 80006ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_ETH_Init+0x84>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <MX_ETH_Init+0x90>)
 80006d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_ETH_Init+0x84>)
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_ETH_Init+0x94>)
 80006da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_ETH_Init+0x84>)
 80006de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_ETH_Init+0x84>)
 80006e6:	f001 fc39 	bl	8001f5c <HAL_ETH_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 fbb2 	bl	8000e58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006f4:	2238      	movs	r2, #56	; 0x38
 80006f6:	2100      	movs	r1, #0
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ETH_Init+0x98>)
 80006fa:	f009 f8d7 	bl	80098ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_ETH_Init+0x98>)
 8000700:	2221      	movs	r2, #33	; 0x21
 8000702:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_ETH_Init+0x98>)
 8000706:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800070a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_ETH_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000204 	.word	0x20000204
 800071c:	40028000 	.word	0x40028000
 8000720:	200009dc 	.word	0x200009dc
 8000724:	20000110 	.word	0x20000110
 8000728:	20000070 	.word	0x20000070
 800072c:	200001cc 	.word	0x200001cc

08000730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_SPI1_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_SPI1_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x74>)
 800074a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800074e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x74>)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000766:	2218      	movs	r2, #24
 8000768:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x74>)
 800077e:	2207      	movs	r2, #7
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000790:	f003 fb14 	bl	8003dbc <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 fb5d 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002b4 	.word	0x200002b4
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_SPI2_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_SPI2_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_SPI2_Init+0x74>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_SPI2_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI2_Init+0x74>)
 80007c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI2_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_SPI2_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI2_Init+0x74>)
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI2_Init+0x74>)
 80007e2:	2210      	movs	r2, #16
 80007e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI2_Init+0x74>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_SPI2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_SPI2_Init+0x74>)
 800080c:	f003 fad6 	bl	8003dbc <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fb1f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000318 	.word	0x20000318
 8000824:	40003800 	.word	0x40003800

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f004 f928 	bl	8004ac0 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 faef 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000037c 	.word	0x2000037c
 8000884:	40004800 	.word	0x40004800

08000888 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2206      	movs	r2, #6
 8000898:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f002 f831 	bl	8002932 <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 fabf 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200004c4 	.word	0x200004c4

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_DMA_Init+0x48>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <MX_DMA_Init+0x48>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_DMA_Init+0x48>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	200c      	movs	r0, #12
 8000908:	f000 ff82 	bl	8001810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800090c:	200c      	movs	r0, #12
 800090e:	f000 ff9b 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2105      	movs	r1, #5
 8000916:	200e      	movs	r0, #14
 8000918:	f000 ff7a 	bl	8001810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800091c:	200e      	movs	r0, #14
 800091e:	f000 ff93 	bl	8001848 <HAL_NVIC_EnableIRQ>

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a46      	ldr	r2, [pc, #280]	; (8000a64 <MX_GPIO_Init+0x134>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a40      	ldr	r2, [pc, #256]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <MX_GPIO_Init+0x134>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a3a      	ldr	r2, [pc, #232]	; (8000a64 <MX_GPIO_Init+0x134>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x134>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_GPIO_Init+0x134>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|SPI2_CS_Pin
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 01d1 	movw	r1, #16593	; 0x40d1
 80009dc:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x138>)
 80009de:	f001 ff8f 	bl	8002900 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <MX_GPIO_Init+0x13c>)
 80009e8:	f001 ff8a 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481b      	ldr	r0, [pc, #108]	; (8000a70 <MX_GPIO_Init+0x140>)
 8000a04:	f001 fdd0 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin SPI2_CS_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|SPI2_CS_Pin
 8000a08:	f244 03d1 	movw	r3, #16593	; 0x40d1
 8000a0c:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0x138>)
 8000a22:	f001 fdc1 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x13c>)
 8000a3e:	f001 fdb3 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x13c>)
 8000a56:	f001 fda7 	bl	80025a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40020800 	.word	0x40020800

08000a74 <StartEnable>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEnable */
void StartEnable(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// CS_LOW
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4827      	ldr	r0, [pc, #156]	; (8000b20 <StartEnable+0xac>)
 8000a82:	f001 ff3d 	bl	8002900 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	4825      	ldr	r0, [pc, #148]	; (8000b20 <StartEnable+0xac>)
 8000a8c:	f001 ff38 	bl	8002900 <HAL_GPIO_WritePin>
	// RISA
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[0].address, 1, 10);
 8000a90:	230a      	movs	r3, #10
 8000a92:	2201      	movs	r2, #1
 8000a94:	4923      	ldr	r1, [pc, #140]	; (8000b24 <StartEnable+0xb0>)
 8000a96:	4824      	ldr	r0, [pc, #144]	; (8000b28 <StartEnable+0xb4>)
 8000a98:	f003 fa3b 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[0].value, 1, 10);
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4922      	ldr	r1, [pc, #136]	; (8000b2c <StartEnable+0xb8>)
 8000aa2:	4821      	ldr	r0, [pc, #132]	; (8000b28 <StartEnable+0xb4>)
 8000aa4:	f003 fa35 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[1].address, 1, 10);
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4920      	ldr	r1, [pc, #128]	; (8000b30 <StartEnable+0xbc>)
 8000aae:	481e      	ldr	r0, [pc, #120]	; (8000b28 <StartEnable+0xb4>)
 8000ab0:	f003 fa2f 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[1].value, 1, 10);
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	491e      	ldr	r1, [pc, #120]	; (8000b34 <StartEnable+0xc0>)
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <StartEnable+0xb4>)
 8000abc:	f003 fa29 	bl	8003f12 <HAL_SPI_Transmit>
	// RISB
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[0].address, 1, 10);
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4917      	ldr	r1, [pc, #92]	; (8000b24 <StartEnable+0xb0>)
 8000ac6:	481c      	ldr	r0, [pc, #112]	; (8000b38 <StartEnable+0xc4>)
 8000ac8:	f003 fa23 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[0].value, 1, 10);
 8000acc:	230a      	movs	r3, #10
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4916      	ldr	r1, [pc, #88]	; (8000b2c <StartEnable+0xb8>)
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <StartEnable+0xc4>)
 8000ad4:	f003 fa1d 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[1].address, 1, 10);
 8000ad8:	230a      	movs	r3, #10
 8000ada:	2201      	movs	r2, #1
 8000adc:	4914      	ldr	r1, [pc, #80]	; (8000b30 <StartEnable+0xbc>)
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <StartEnable+0xc4>)
 8000ae0:	f003 fa17 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[1].value, 1, 10);
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4912      	ldr	r1, [pc, #72]	; (8000b34 <StartEnable+0xc0>)
 8000aea:	4813      	ldr	r0, [pc, #76]	; (8000b38 <StartEnable+0xc4>)
 8000aec:	f003 fa11 	bl	8003f12 <HAL_SPI_Transmit>
	// CS_HIGHT
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <StartEnable+0xac>)
 8000af6:	f001 ff03 	bl	8002900 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <StartEnable+0xac>)
 8000b00:	f001 fefe 	bl	8002900 <HAL_GPIO_WritePin>
	//uint8_t data[]= "Enable completed\n";
	//HAL_UART_Transmit(&huart3, data, sizeof(data),500);
    /* Give semaphore to Task 2 */
	osSemaphoreRelease(myBinarySemHandle);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <StartEnable+0xc8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fcfd 	bl	8006508 <osSemaphoreRelease>
    /* Delete Task 1 */
    vTaskDelete(EnableHandle);
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <StartEnable+0xcc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 f84e 	bl	8007bb4 <vTaskDelete>
  /* USER CODE END 5 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40020400 	.word	0x40020400
 8000b24:	08009b50 	.word	0x08009b50
 8000b28:	200002b4 	.word	0x200002b4
 8000b2c:	08009b51 	.word	0x08009b51
 8000b30:	08009b52 	.word	0x08009b52
 8000b34:	08009b53 	.word	0x08009b53
 8000b38:	20000318 	.word	0x20000318
 8000b3c:	200009d8 	.word	0x200009d8
 8000b40:	200009cc 	.word	0x200009cc

08000b44 <StartInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInit */
void StartInit(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInit */
    /* Wait for semaphore from Task 1 */
	osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8000b4c:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <StartInit+0x108>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 fc71 	bl	800643c <osSemaphoreAcquire>
	uint8_t i = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
	//uint8_t data[]= "Init completed\n";
	for(i = 0; i < 6;i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e062      	b.n	8000c2a <StartInit+0xe6>
	{
	// CS_LOW
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2110      	movs	r1, #16
 8000b68:	4839      	ldr	r0, [pc, #228]	; (8000c50 <StartInit+0x10c>)
 8000b6a:	f001 fec9 	bl	8002900 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	4837      	ldr	r0, [pc, #220]	; (8000c50 <StartInit+0x10c>)
 8000b74:	f001 fec4 	bl	8002900 <HAL_GPIO_WritePin>
	// RISA
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4a35      	ldr	r2, [pc, #212]	; (8000c54 <StartInit+0x110>)
 8000b7e:	1899      	adds	r1, r3, r2
 8000b80:	230a      	movs	r3, #10
 8000b82:	2201      	movs	r2, #1
 8000b84:	4834      	ldr	r0, [pc, #208]	; (8000c58 <StartInit+0x114>)
 8000b86:	f003 f9c4 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <StartInit+0x110>)
 8000b90:	4413      	add	r3, r2
 8000b92:	1c59      	adds	r1, r3, #1
 8000b94:	230a      	movs	r3, #10
 8000b96:	2201      	movs	r2, #1
 8000b98:	482f      	ldr	r0, [pc, #188]	; (8000c58 <StartInit+0x114>)
 8000b9a:	f003 f9ba 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <StartInit+0x110>)
 8000ba4:	1899      	adds	r1, r3, r2
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	2201      	movs	r2, #1
 8000baa:	482b      	ldr	r0, [pc, #172]	; (8000c58 <StartInit+0x114>)
 8000bac:	f003 f9b1 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <StartInit+0x110>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	1c59      	adds	r1, r3, #1
 8000bba:	230a      	movs	r3, #10
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <StartInit+0x114>)
 8000bc0:	f003 f9a7 	bl	8003f12 <HAL_SPI_Transmit>
	// RISB
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <StartInit+0x110>)
 8000bca:	1899      	adds	r1, r3, r2
 8000bcc:	230a      	movs	r3, #10
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4822      	ldr	r0, [pc, #136]	; (8000c5c <StartInit+0x118>)
 8000bd2:	f003 f99e 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <StartInit+0x110>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	1c59      	adds	r1, r3, #1
 8000be0:	230a      	movs	r3, #10
 8000be2:	2201      	movs	r2, #1
 8000be4:	481d      	ldr	r0, [pc, #116]	; (8000c5c <StartInit+0x118>)
 8000be6:	f003 f994 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <StartInit+0x110>)
 8000bf0:	1899      	adds	r1, r3, r2
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <StartInit+0x118>)
 8000bf8:	f003 f98b 	bl	8003f12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <StartInit+0x110>)
 8000c02:	4413      	add	r3, r2
 8000c04:	1c59      	adds	r1, r3, #1
 8000c06:	230a      	movs	r3, #10
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <StartInit+0x118>)
 8000c0c:	f003 f981 	bl	8003f12 <HAL_SPI_Transmit>
	// CS_HIGHT
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2110      	movs	r1, #16
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <StartInit+0x10c>)
 8000c16:	f001 fe73 	bl	8002900 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	480c      	ldr	r0, [pc, #48]	; (8000c50 <StartInit+0x10c>)
 8000c20:	f001 fe6e 	bl	8002900 <HAL_GPIO_WritePin>
	for(i = 0; i < 6;i++)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3301      	adds	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d999      	bls.n	8000b64 <StartInit+0x20>
	//HAL_UART_Transmit(&huart3, data, sizeof(data),500);
	}
    /* Give semaphore to Task 3 */
	osSemaphoreRelease(myBinarySemHandle);
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <StartInit+0x108>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fc67 	bl	8006508 <osSemaphoreRelease>
    /* Delete Task 2 */
    vTaskDelete(InitHandle);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <StartInit+0x11c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 ffb8 	bl	8007bb4 <vTaskDelete>
  /* USER CODE END StartInit */
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200009d8 	.word	0x200009d8
 8000c50:	40020400 	.word	0x40020400
 8000c54:	08009b54 	.word	0x08009b54
 8000c58:	200002b4 	.word	0x200002b4
 8000c5c:	20000318 	.word	0x20000318
 8000c60:	200009d0 	.word	0x200009d0

08000c64 <StartUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdate */
void StartUpdate(void *argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdate */
  /* Infinite loop */
  for(;;)
  {
	  	osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8000c6c:	4b6b      	ldr	r3, [pc, #428]	; (8000e1c <StartUpdate+0x1b8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 fbe1 	bl	800643c <osSemaphoreAcquire>
		//This part Configure 8 antenna (P4 to P11 on each MAX7301)
		uint8_t bufferRISA1[2] = {0x44, ConfigRISA[0].antEnable};
 8000c7a:	2344      	movs	r3, #68	; 0x44
 8000c7c:	753b      	strb	r3, [r7, #20]
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <StartUpdate+0x1bc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	757b      	strb	r3, [r7, #21]
		uint8_t bufferRISA2[2] = {0x44, ConfigRISA[3].antEnable};
 8000c84:	2344      	movs	r3, #68	; 0x44
 8000c86:	743b      	strb	r3, [r7, #16]
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <StartUpdate+0x1bc>)
 8000c8a:	78db      	ldrb	r3, [r3, #3]
 8000c8c:	747b      	strb	r3, [r7, #17]

		uint8_t bufferRISB1[2] = {0x44, ConfigRISA[0].antEnable};
 8000c8e:	2344      	movs	r3, #68	; 0x44
 8000c90:	733b      	strb	r3, [r7, #12]
 8000c92:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <StartUpdate+0x1bc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	737b      	strb	r3, [r7, #13]
		uint8_t bufferRISB2[2] = {0x44, ConfigRISA[3].antEnable};
 8000c98:	2344      	movs	r3, #68	; 0x44
 8000c9a:	723b      	strb	r3, [r7, #8]
 8000c9c:	4b60      	ldr	r3, [pc, #384]	; (8000e20 <StartUpdate+0x1bc>)
 8000c9e:	78db      	ldrb	r3, [r3, #3]
 8000ca0:	727b      	strb	r3, [r7, #9]

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	485f      	ldr	r0, [pc, #380]	; (8000e24 <StartUpdate+0x1c0>)
 8000ca8:	f001 fe2a 	bl	8002900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	485c      	ldr	r0, [pc, #368]	; (8000e24 <StartUpdate+0x1c0>)
 8000cb2:	f001 fe25 	bl	8002900 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA2, 2, 10);
 8000cb6:	f107 0110 	add.w	r1, r7, #16
 8000cba:	230a      	movs	r3, #10
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	485a      	ldr	r0, [pc, #360]	; (8000e28 <StartUpdate+0x1c4>)
 8000cc0:	f003 f927 	bl	8003f12 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA1, 2, 10);
 8000cc4:	f107 0114 	add.w	r1, r7, #20
 8000cc8:	230a      	movs	r3, #10
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4856      	ldr	r0, [pc, #344]	; (8000e28 <StartUpdate+0x1c4>)
 8000cce:	f003 f920 	bl	8003f12 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB2, 2, 10);
 8000cd2:	f107 0108 	add.w	r1, r7, #8
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4854      	ldr	r0, [pc, #336]	; (8000e2c <StartUpdate+0x1c8>)
 8000cdc:	f003 f919 	bl	8003f12 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB1, 2, 10);
 8000ce0:	f107 010c 	add.w	r1, r7, #12
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <StartUpdate+0x1c8>)
 8000cea:	f003 f912 	bl	8003f12 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	484c      	ldr	r0, [pc, #304]	; (8000e24 <StartUpdate+0x1c0>)
 8000cf4:	f001 fe04 	bl	8002900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4849      	ldr	r0, [pc, #292]	; (8000e24 <StartUpdate+0x1c0>)
 8000cfe:	f001 fdff 	bl	8002900 <HAL_GPIO_WritePin>


		//This part Configure 8 antenna (P12 to P19 on each MAX7301)
		bufferRISA1[0] = 0x4C;
 8000d02:	234c      	movs	r3, #76	; 0x4c
 8000d04:	753b      	strb	r3, [r7, #20]
		bufferRISA1[1] = ConfigRISA[1].antEnable;
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <StartUpdate+0x1bc>)
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	757b      	strb	r3, [r7, #21]
		bufferRISA2[0] = 0x4C;
 8000d0c:	234c      	movs	r3, #76	; 0x4c
 8000d0e:	743b      	strb	r3, [r7, #16]
		bufferRISA2[1] = ConfigRISA[4].antEnable;
 8000d10:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <StartUpdate+0x1bc>)
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	747b      	strb	r3, [r7, #17]

		bufferRISB1[0] = 0x4C;
 8000d16:	234c      	movs	r3, #76	; 0x4c
 8000d18:	733b      	strb	r3, [r7, #12]
		bufferRISB1[1] = ConfigRISB[1].antEnable;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <StartUpdate+0x1cc>)
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	737b      	strb	r3, [r7, #13]
		bufferRISB2[0] = 0x4C;
 8000d20:	234c      	movs	r3, #76	; 0x4c
 8000d22:	723b      	strb	r3, [r7, #8]
		bufferRISB2[1] = ConfigRISB[4].antEnable;
 8000d24:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <StartUpdate+0x1cc>)
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	727b      	strb	r3, [r7, #9]

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	483d      	ldr	r0, [pc, #244]	; (8000e24 <StartUpdate+0x1c0>)
 8000d30:	f001 fde6 	bl	8002900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	483a      	ldr	r0, [pc, #232]	; (8000e24 <StartUpdate+0x1c0>)
 8000d3a:	f001 fde1 	bl	8002900 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA2, 2, 10);
 8000d3e:	f107 0110 	add.w	r1, r7, #16
 8000d42:	230a      	movs	r3, #10
 8000d44:	2202      	movs	r2, #2
 8000d46:	4838      	ldr	r0, [pc, #224]	; (8000e28 <StartUpdate+0x1c4>)
 8000d48:	f003 f8e3 	bl	8003f12 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA1, 2, 10);
 8000d4c:	f107 0114 	add.w	r1, r7, #20
 8000d50:	230a      	movs	r3, #10
 8000d52:	2202      	movs	r2, #2
 8000d54:	4834      	ldr	r0, [pc, #208]	; (8000e28 <StartUpdate+0x1c4>)
 8000d56:	f003 f8dc 	bl	8003f12 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB2, 2, 10);
 8000d5a:	f107 0108 	add.w	r1, r7, #8
 8000d5e:	230a      	movs	r3, #10
 8000d60:	2202      	movs	r2, #2
 8000d62:	4832      	ldr	r0, [pc, #200]	; (8000e2c <StartUpdate+0x1c8>)
 8000d64:	f003 f8d5 	bl	8003f12 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB1, 2, 10);
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	2202      	movs	r2, #2
 8000d70:	482e      	ldr	r0, [pc, #184]	; (8000e2c <StartUpdate+0x1c8>)
 8000d72:	f003 f8ce 	bl	8003f12 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2110      	movs	r1, #16
 8000d7a:	482a      	ldr	r0, [pc, #168]	; (8000e24 <StartUpdate+0x1c0>)
 8000d7c:	f001 fdc0 	bl	8002900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4827      	ldr	r0, [pc, #156]	; (8000e24 <StartUpdate+0x1c0>)
 8000d86:	f001 fdbb 	bl	8002900 <HAL_GPIO_WritePin>

		//This part Configure 8 antenna (P20 to P27 on each MAX7301)
		bufferRISA1[0] = 0x54;
 8000d8a:	2354      	movs	r3, #84	; 0x54
 8000d8c:	753b      	strb	r3, [r7, #20]
		bufferRISA1[1] = ConfigRISA[2].antEnable;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <StartUpdate+0x1bc>)
 8000d90:	789b      	ldrb	r3, [r3, #2]
 8000d92:	757b      	strb	r3, [r7, #21]
		bufferRISA2[0] = 0x54;
 8000d94:	2354      	movs	r3, #84	; 0x54
 8000d96:	743b      	strb	r3, [r7, #16]
		bufferRISA2[1] = ConfigRISA[5].antEnable;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <StartUpdate+0x1bc>)
 8000d9a:	795b      	ldrb	r3, [r3, #5]
 8000d9c:	747b      	strb	r3, [r7, #17]

		bufferRISB1[0] = 0x54;
 8000d9e:	2354      	movs	r3, #84	; 0x54
 8000da0:	733b      	strb	r3, [r7, #12]
		bufferRISB1[1] = ConfigRISB[2].antEnable;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <StartUpdate+0x1cc>)
 8000da4:	789b      	ldrb	r3, [r3, #2]
 8000da6:	737b      	strb	r3, [r7, #13]
		bufferRISB2[0] = 0x54;
 8000da8:	2354      	movs	r3, #84	; 0x54
 8000daa:	723b      	strb	r3, [r7, #8]
		bufferRISB2[1] = ConfigRISB[5].antEnable;
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <StartUpdate+0x1cc>)
 8000dae:	795b      	ldrb	r3, [r3, #5]
 8000db0:	727b      	strb	r3, [r7, #9]

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	481b      	ldr	r0, [pc, #108]	; (8000e24 <StartUpdate+0x1c0>)
 8000db8:	f001 fda2 	bl	8002900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <StartUpdate+0x1c0>)
 8000dc2:	f001 fd9d 	bl	8002900 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA2, 2, 10);
 8000dc6:	f107 0110 	add.w	r1, r7, #16
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4816      	ldr	r0, [pc, #88]	; (8000e28 <StartUpdate+0x1c4>)
 8000dd0:	f003 f89f 	bl	8003f12 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA1, 2, 10);
 8000dd4:	f107 0114 	add.w	r1, r7, #20
 8000dd8:	230a      	movs	r3, #10
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <StartUpdate+0x1c4>)
 8000dde:	f003 f898 	bl	8003f12 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB2, 2, 10);
 8000de2:	f107 0108 	add.w	r1, r7, #8
 8000de6:	230a      	movs	r3, #10
 8000de8:	2202      	movs	r2, #2
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <StartUpdate+0x1c8>)
 8000dec:	f003 f891 	bl	8003f12 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB1, 2, 10);
 8000df0:	f107 010c 	add.w	r1, r7, #12
 8000df4:	230a      	movs	r3, #10
 8000df6:	2202      	movs	r2, #2
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <StartUpdate+0x1c8>)
 8000dfa:	f003 f88a 	bl	8003f12 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <StartUpdate+0x1c0>)
 8000e04:	f001 fd7c 	bl	8002900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <StartUpdate+0x1c0>)
 8000e0e:	f001 fd77 	bl	8002900 <HAL_GPIO_WritePin>

		//uint8_t data[]= "Update completed\n";
		//HAL_UART_Transmit(&huart3, data, sizeof(data),500);
    osDelay(500);
 8000e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e16:	f005 fa47 	bl	80062a8 <osDelay>
  {
 8000e1a:	e727      	b.n	8000c6c <StartUpdate+0x8>
 8000e1c:	200009d8 	.word	0x200009d8
 8000e20:	20000000 	.word	0x20000000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	200002b4 	.word	0x200002b4
 8000e2c:	20000318 	.word	0x20000318
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e46:	f000 fbe7 	bl	8001618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40001000 	.word	0x40001000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f000 fcb5 	bl	8001810 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	; (800100c <HAL_ETH_MspInit+0x158>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	f040 8096 	bne.w	8001004 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eec:	623b      	str	r3, [r7, #32]
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a40      	ldr	r2, [pc, #256]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a34      	ldr	r2, [pc, #208]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_ETH_MspInit+0x15c>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f80:	2332      	movs	r3, #50	; 0x32
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f90:	230b      	movs	r3, #11
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481e      	ldr	r0, [pc, #120]	; (8001014 <HAL_ETH_MspInit+0x160>)
 8000f9c:	f001 fb04 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fa0:	2386      	movs	r3, #134	; 0x86
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4817      	ldr	r0, [pc, #92]	; (8001018 <HAL_ETH_MspInit+0x164>)
 8000fbc:	f001 faf4 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd2:	230b      	movs	r3, #11
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <HAL_ETH_MspInit+0x168>)
 8000fde:	f001 fae3 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fe2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <HAL_ETH_MspInit+0x16c>)
 8001000:	f001 fad2 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3738      	adds	r7, #56	; 0x38
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40028000 	.word	0x40028000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40021800 	.word	0x40021800

08001024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a4a      	ldr	r2, [pc, #296]	; (800116c <HAL_SPI_MspInit+0x148>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d144      	bne.n	80010d0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a49      	ldr	r2, [pc, #292]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 800104c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a43      	ldr	r2, [pc, #268]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800108e:	2360      	movs	r3, #96	; 0x60
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109e:	2305      	movs	r3, #5
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4832      	ldr	r0, [pc, #200]	; (8001174 <HAL_SPI_MspInit+0x150>)
 80010aa:	f001 fa7d 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ae:	2320      	movs	r3, #32
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010be:	2305      	movs	r3, #5
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	482b      	ldr	r0, [pc, #172]	; (8001178 <HAL_SPI_MspInit+0x154>)
 80010ca:	f001 fa6d 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010ce:	e049      	b.n	8001164 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a29      	ldr	r2, [pc, #164]	; (800117c <HAL_SPI_MspInit+0x158>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d144      	bne.n	8001164 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a24      	ldr	r2, [pc, #144]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_SPI_MspInit+0x14c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001122:	230c      	movs	r3, #12
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001132:	2305      	movs	r3, #5
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4810      	ldr	r0, [pc, #64]	; (8001180 <HAL_SPI_MspInit+0x15c>)
 800113e:	f001 fa33 	bl	80025a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001154:	2305      	movs	r3, #5
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_SPI_MspInit+0x154>)
 8001160:	f001 fa22 	bl	80025a8 <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	; 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013000 	.word	0x40013000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40003800 	.word	0x40003800
 8001180:	40020800 	.word	0x40020800

08001184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0aa      	sub	sp, #168	; 0xa8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2284      	movs	r2, #132	; 0x84
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f008 fb81 	bl	80098ac <memset>
  if(huart->Instance==USART3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a56      	ldr	r2, [pc, #344]	; (8001308 <HAL_UART_MspInit+0x184>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	f040 80a4 	bne.w	80012fe <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fa09 	bl	80035dc <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80011d0:	f7ff fe42 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_UART_MspInit+0x188>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_UART_MspInit+0x188>)
 80011da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_UART_MspInit+0x188>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_UART_MspInit+0x188>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a46      	ldr	r2, [pc, #280]	; (800130c <HAL_UART_MspInit+0x188>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_UART_MspInit+0x188>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001204:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001208:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121e:	2307      	movs	r3, #7
 8001220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001228:	4619      	mov	r1, r3
 800122a:	4839      	ldr	r0, [pc, #228]	; (8001310 <HAL_UART_MspInit+0x18c>)
 800122c:	f001 f9bc 	bl	80025a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001232:	4a39      	ldr	r2, [pc, #228]	; (8001318 <HAL_UART_MspInit+0x194>)
 8001234:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800123c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b33      	ldr	r3, [pc, #204]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_UART_MspInit+0x190>)
 800124c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001252:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001258:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_UART_MspInit+0x190>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001264:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001268:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800126c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001274:	4827      	ldr	r0, [pc, #156]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001276:	f000 faf5 	bl	8001864 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001280:	f7ff fdea 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <HAL_UART_MspInit+0x190>)
 8001288:	675a      	str	r2, [r3, #116]	; 0x74
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <HAL_UART_MspInit+0x190>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_UART_MspInit+0x198>)
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <HAL_UART_MspInit+0x19c>)
 8001294:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_UART_MspInit+0x198>)
 8001298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800129c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_UART_MspInit+0x198>)
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_UART_MspInit+0x198>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_UART_MspInit+0x198>)
 80012ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_UART_MspInit+0x198>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_UART_MspInit+0x198>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_UART_MspInit+0x198>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_UART_MspInit+0x198>)
 80012c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_UART_MspInit+0x198>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <HAL_UART_MspInit+0x198>)
 80012d4:	f000 fac6 	bl	8001864 <HAL_DMA_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80012de:	f7ff fdbb 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_UART_MspInit+0x198>)
 80012e6:	671a      	str	r2, [r3, #112]	; 0x70
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <HAL_UART_MspInit+0x198>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2105      	movs	r1, #5
 80012f2:	2027      	movs	r0, #39	; 0x27
 80012f4:	f000 fa8c 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012f8:	2027      	movs	r0, #39	; 0x27
 80012fa:	f000 faa5 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	37a8      	adds	r7, #168	; 0xa8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40004800 	.word	0x40004800
 800130c:	40023800 	.word	0x40023800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	20000404 	.word	0x20000404
 8001318:	40026028 	.word	0x40026028
 800131c:	20000464 	.word	0x20000464
 8001320:	40026058 	.word	0x40026058

08001324 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ac      	sub	sp, #176	; 0xb0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	2284      	movs	r2, #132	; 0x84
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f008 fab1 	bl	80098ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001352:	d159      	bne.n	8001408 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001358:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f939 	bl	80035dc <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001370:	f7ff fd72 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_PCD_MspInit+0xec>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_PCD_MspInit+0xec>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_PCD_MspInit+0xec>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800138c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013a6:	230a      	movs	r3, #10
 80013a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <HAL_PCD_MspInit+0xf0>)
 80013b4:	f001 f8f8 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <HAL_PCD_MspInit+0xf0>)
 80013d4:	f001 f8e8 	bl	80025a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e2:	6353      	str	r3, [r2, #52]	; 0x34
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6453      	str	r3, [r2, #68]	; 0x44
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	37b0      	adds	r7, #176	; 0xb0
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <HAL_InitTick+0xe0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a32      	ldr	r2, [pc, #200]	; (80014f8 <HAL_InitTick+0xe0>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_InitTick+0xe0>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f002 f894 	bl	8003578 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800145a:	f002 f865 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 800145e:	6378      	str	r0, [r7, #52]	; 0x34
 8001460:	e004      	b.n	800146c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001462:	f002 f861 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	4a23      	ldr	r2, [pc, #140]	; (80014fc <HAL_InitTick+0xe4>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3b01      	subs	r3, #1
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_InitTick+0xe8>)
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_InitTick+0xec>)
 800147e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_InitTick+0xe8>)
 8001482:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001486:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_InitTick+0xe8>)
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_InitTick+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_InitTick+0xe8>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_InitTick+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014a0:	4817      	ldr	r0, [pc, #92]	; (8001500 <HAL_InitTick+0xe8>)
 80014a2:	f003 f82d 	bl	8004500 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11b      	bne.n	80014ec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <HAL_InitTick+0xe8>)
 80014b6:	f003 f885 	bl	80045c4 <HAL_TIM_Base_Start_IT>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d111      	bne.n	80014ec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c8:	2036      	movs	r0, #54	; 0x36
 80014ca:	f000 f9bd 	bl	8001848 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d808      	bhi.n	80014e6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	2036      	movs	r0, #54	; 0x36
 80014da:	f000 f999 	bl	8001810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_InitTick+0xf0>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e002      	b.n	80014ec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	200009e4 	.word	0x200009e4
 8001504:	40001000 	.word	0x40001000
 8001508:	20000014 	.word	0x20000014

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Stream1_IRQHandler+0x10>)
 800153e:	f000 fad1 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000404 	.word	0x20000404

0800154c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA1_Stream3_IRQHandler+0x10>)
 8001552:	f000 fac7 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000464 	.word	0x20000464

08001560 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <USART3_IRQHandler+0x10>)
 8001566:	f003 faf9 	bl	8004b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000037c 	.word	0x2000037c

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM6_DAC_IRQHandler+0x10>)
 800157a:	f003 f89b 	bl	80046b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200009e4 	.word	0x200009e4

08001588 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c8:	4c0b      	ldr	r4, [pc, #44]	; (80015f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d6:	f7ff ffd7 	bl	8001588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f008 f9c5 	bl	8009968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7fe ff95 	bl	800050c <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015f0:	08009b90 	.word	0x08009b90
  ldr r2, =_sbss
 80015f4:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80015f8:	20005554 	.word	0x20005554

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>

080015fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	2003      	movs	r0, #3
 8001604:	f000 f8f9 	bl	80017fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001608:	200f      	movs	r0, #15
 800160a:	f7ff ff05 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160e:	f7ff fc29 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000018 	.word	0x20000018
 800163c:	20000a30 	.word	0x20000a30

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000a30 	.word	0x20000a30

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000018 	.word	0x20000018

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <__NVIC_SetPriorityGrouping+0x40>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x40>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	05fa0000 	.word	0x05fa0000

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff4c 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001822:	f7ff ff61 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001826:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7ff ffb1 	bl	8001794 <NVIC_EncodePriority>
 8001832:	4602      	mov	r2, r0
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff80 	bl	8001740 <__NVIC_SetPriority>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff54 	bl	8001704 <__NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fee6 	bl	8001640 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e099      	b.n	80019b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a0:	e00f      	b.n	80018c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018a2:	f7ff fecd 	bl	8001640 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d908      	bls.n	80018c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e078      	b.n	80019b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e8      	bne.n	80018a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <HAL_DMA_Init+0x158>)
 80018dc:	4013      	ands	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	2b04      	cmp	r3, #4
 800191a:	d107      	bne.n	800192c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4313      	orrs	r3, r2
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0307 	bic.w	r3, r3, #7
 8001942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	2b04      	cmp	r3, #4
 8001954:	d117      	bne.n	8001986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa7b 	bl	8001e64 <DMA_CheckFifoParam>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2240      	movs	r2, #64	; 0x40
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001982:	2301      	movs	r3, #1
 8001984:	e016      	b.n	80019b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fa32 	bl	8001df8 <DMA_CalcBaseAndBitshift>
 8001994:	4603      	mov	r3, r0
 8001996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	223f      	movs	r2, #63	; 0x3f
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	f010803f 	.word	0xf010803f

080019c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ce:	f7ff fe37 	bl	8001640 <HAL_GetTick>
 80019d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d008      	beq.n	80019f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e052      	b.n	8001a98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0216 	bic.w	r2, r2, #22
 8001a00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <HAL_DMA_Abort+0x62>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0208 	bic.w	r2, r2, #8
 8001a30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a42:	e013      	b.n	8001a6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a44:	f7ff fdfc 	bl	8001640 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d90c      	bls.n	8001a6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e015      	b.n	8001a98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e4      	bne.n	8001a44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	223f      	movs	r2, #63	; 0x3f
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d004      	beq.n	8001abe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00c      	b.n	8001ad8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <HAL_DMA_IRQHandler+0x248>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_DMA_IRQHandler+0x24c>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2208      	movs	r2, #8
 8001b10:	409a      	lsls	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01a      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0204 	bic.w	r2, r2, #4
 8001b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	2201      	movs	r2, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d012      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2201      	movs	r2, #1
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0202 	orr.w	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d012      	beq.n	8001bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00b      	beq.n	8001bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2204      	movs	r2, #4
 8001baa:	409a      	lsls	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d043      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d03c      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2210      	movs	r2, #16
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d018      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d108      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d024      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
 8001c12:	e01f      	b.n	8001c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
 8001c24:	e016      	b.n	8001c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0208 	bic.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2220      	movs	r2, #32
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 808f 	beq.w	8001d84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8087 	beq.w	8001d84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d136      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0216 	bic.w	r2, r2, #22
 8001c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x1da>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0208 	bic.w	r2, r2, #8
 8001ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	223f      	movs	r2, #63	; 0x3f
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d07e      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
        }
        return;
 8001cfa:	e079      	b.n	8001df0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01d      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d031      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e02c      	b.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
 8001d2a:	bf00      	nop
 8001d2c:	20000010 	.word	0x20000010
 8001d30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	e01e      	b.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10f      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0210 	bic.w	r2, r2, #16
 8001d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d032      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d022      	beq.n	8001dde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2205      	movs	r2, #5
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d307      	bcc.n	8001dcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x2cc>
 8001dca:	e000      	b.n	8001dce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
 8001dee:	e000      	b.n	8001df2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001df0:	bf00      	nop
    }
  }
}
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3b10      	subs	r3, #16
 8001e08:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <DMA_CalcBaseAndBitshift+0x60>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <DMA_CalcBaseAndBitshift+0x64>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d908      	bls.n	8001e38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <DMA_CalcBaseAndBitshift+0x68>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	1d1a      	adds	r2, r3, #4
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58
 8001e36:	e006      	b.n	8001e46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <DMA_CalcBaseAndBitshift+0x68>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	aaaaaaab 	.word	0xaaaaaaab
 8001e5c:	08009b78 	.word	0x08009b78
 8001e60:	fffffc00 	.word	0xfffffc00

08001e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d11f      	bne.n	8001ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d856      	bhi.n	8001f32 <DMA_CheckFifoParam+0xce>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <DMA_CheckFifoParam+0x28>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001eaf 	.word	0x08001eaf
 8001e94:	08001e9d 	.word	0x08001e9d
 8001e98:	08001f33 	.word	0x08001f33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d046      	beq.n	8001f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eac:	e043      	b.n	8001f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb6:	d140      	bne.n	8001f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ebc:	e03d      	b.n	8001f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec6:	d121      	bne.n	8001f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d837      	bhi.n	8001f3e <DMA_CheckFifoParam+0xda>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <DMA_CheckFifoParam+0x70>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001eeb 	.word	0x08001eeb
 8001edc:	08001ee5 	.word	0x08001ee5
 8001ee0:	08001efd 	.word	0x08001efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee8:	e030      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d025      	beq.n	8001f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efa:	e022      	b.n	8001f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f04:	d11f      	bne.n	8001f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f0a:	e01c      	b.n	8001f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d903      	bls.n	8001f1a <DMA_CheckFifoParam+0xb6>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d003      	beq.n	8001f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f18:	e018      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1e:	e015      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f30:	e00b      	b.n	8001f4a <DMA_CheckFifoParam+0xe6>
      break;
 8001f32:	bf00      	nop
 8001f34:	e00a      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f36:	bf00      	nop
 8001f38:	e008      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e006      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e004      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e002      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f46:	bf00      	nop
 8001f48:	e000      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06a      	b.n	8002044 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d106      	bne.n	8001f86 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2223      	movs	r2, #35	; 0x23
 8001f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7fe ff97 	bl	8000eb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_ETH_Init+0xf0>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_ETH_Init+0xf0>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_ETH_Init+0xf0>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_ETH_Init+0xf4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_ETH_Init+0xf4>)
 8001fa4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fa8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_ETH_Init+0xf4>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <HAL_ETH_Init+0xf4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_ETH_Init+0xf4>)
 8001fba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd4:	f7ff fb34 	bl	8001640 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fda:	e011      	b.n	8002000 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fdc:	f7ff fb30 	bl	8001640 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fea:	d909      	bls.n	8002000 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	22e0      	movs	r2, #224	; 0xe0
 8001ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e021      	b.n	8002044 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e4      	bne.n	8001fdc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f958 	bl	80022c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f9ff 	bl	800241c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa55 	bl	80024ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	461a      	mov	r2, r3
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9bd 	bl	80023ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2210      	movs	r2, #16
 800203e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800

08002054 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <ETH_SetMACConfig+0x15c>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7c1b      	ldrb	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <ETH_SetMACConfig+0x28>
 8002076:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800207a:	e000      	b.n	800207e <ETH_SetMACConfig+0x2a>
 800207c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	7c5b      	ldrb	r3, [r3, #17]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <ETH_SetMACConfig+0x38>
 8002086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800208a:	e000      	b.n	800208e <ETH_SetMACConfig+0x3a>
 800208c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800208e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002094:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7fdb      	ldrb	r3, [r3, #31]
 800209a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800209c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	7f92      	ldrb	r2, [r2, #30]
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d102      	bne.n	80020b2 <ETH_SetMACConfig+0x5e>
 80020ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b0:	e000      	b.n	80020b4 <ETH_SetMACConfig+0x60>
 80020b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80020b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7f1b      	ldrb	r3, [r3, #28]
 80020ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	791b      	ldrb	r3, [r3, #4]
 80020c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d102      	bne.n	80020dc <ETH_SetMACConfig+0x88>
 80020d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020da:	e000      	b.n	80020de <ETH_SetMACConfig+0x8a>
 80020dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	7bdb      	ldrb	r3, [r3, #15]
 80020e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020f6:	4313      	orrs	r3, r2
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff faa2 	bl	8001658 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	f64f 7341 	movw	r3, #65345	; 0xff41
 800212a:	4013      	ands	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800213a:	2a00      	cmp	r2, #0
 800213c:	d101      	bne.n	8002142 <ETH_SetMACConfig+0xee>
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	e000      	b.n	8002144 <ETH_SetMACConfig+0xf0>
 8002142:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002144:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800214a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002152:	2a01      	cmp	r2, #1
 8002154:	d101      	bne.n	800215a <ETH_SetMACConfig+0x106>
 8002156:	2208      	movs	r2, #8
 8002158:	e000      	b.n	800215c <ETH_SetMACConfig+0x108>
 800215a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800215c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002164:	2a01      	cmp	r2, #1
 8002166:	d101      	bne.n	800216c <ETH_SetMACConfig+0x118>
 8002168:	2204      	movs	r2, #4
 800216a:	e000      	b.n	800216e <ETH_SetMACConfig+0x11a>
 800216c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800216e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002176:	2a01      	cmp	r2, #1
 8002178:	d101      	bne.n	800217e <ETH_SetMACConfig+0x12a>
 800217a:	2202      	movs	r2, #2
 800217c:	e000      	b.n	8002180 <ETH_SetMACConfig+0x12c>
 800217e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002180:	4313      	orrs	r3, r2
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002198:	2001      	movs	r0, #1
 800219a:	f7ff fa5d 	bl	8001658 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	ff20810f 	.word	0xff20810f

080021b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <ETH_SetDMAConfig+0x110>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7b1b      	ldrb	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <ETH_SetDMAConfig+0x2c>
 80021da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021de:	e000      	b.n	80021e2 <ETH_SetDMAConfig+0x2e>
 80021e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7b5b      	ldrb	r3, [r3, #13]
 80021e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	7f52      	ldrb	r2, [r2, #29]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d102      	bne.n	80021f8 <ETH_SetDMAConfig+0x44>
 80021f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021f6:	e000      	b.n	80021fa <ETH_SetDMAConfig+0x46>
 80021f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	7b9b      	ldrb	r3, [r3, #14]
 8002200:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002202:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002208:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7f1b      	ldrb	r3, [r3, #28]
 800220e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002210:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	7f9b      	ldrb	r3, [r3, #30]
 8002216:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002218:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800221e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002226:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002228:	4313      	orrs	r3, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800224a:	2001      	movs	r0, #1
 800224c:	f7ff fa04 	bl	8001658 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002258:	461a      	mov	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	791b      	ldrb	r3, [r3, #4]
 8002262:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002268:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800226e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002274:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800227c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800227e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002286:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800228c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002296:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800229a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7ff f9d5 	bl	8001658 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	f8de3f23 	.word	0xf8de3f23

080022c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0a6      	sub	sp, #152	; 0x98
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022dc:	2300      	movs	r3, #0
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002304:	2300      	movs	r3, #0
 8002306:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800230e:	2300      	movs	r3, #0
 8002310:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800232a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002334:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800233c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fe86 	bl	8002054 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002348:	2301      	movs	r3, #1
 800234a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800234c:	2301      	movs	r3, #1
 800234e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002356:	2301      	movs	r3, #1
 8002358:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800236e:	2301      	movs	r3, #1
 8002370:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002374:	2301      	movs	r3, #1
 8002376:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800237e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002382:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002388:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002390:	2300      	movs	r3, #0
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff08 	bl	80021b4 <ETH_SetDMAConfig>
}
 80023a4:	bf00      	nop
 80023a6:	3798      	adds	r7, #152	; 0x98
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3305      	adds	r3, #5
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	3204      	adds	r2, #4
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <ETH_MACAddressConfig+0x68>)
 80023ce:	4413      	add	r3, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3303      	adds	r3, #3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	061a      	lsls	r2, r3, #24
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3302      	adds	r3, #2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3301      	adds	r3, #1
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	4313      	orrs	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <ETH_MACAddressConfig+0x6c>)
 80023fe:	4413      	add	r3, r2
 8002400:	461a      	mov	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	6013      	str	r3, [r2, #0]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40028040 	.word	0x40028040
 8002418:	40028044 	.word	0x40028044

0800241c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e03e      	b.n	80024a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	3206      	adds	r2, #6
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d80c      	bhi.n	800248c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68d9      	ldr	r1, [r3, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	e004      	b.n	8002496 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d9bd      	bls.n	800242a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	611a      	str	r2, [r3, #16]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e046      	b.n	800256a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6919      	ldr	r1, [r3, #16]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002518:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002520:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	3212      	adds	r2, #18
 8002536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d80c      	bhi.n	800255a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6919      	ldr	r1, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	e004      	b.n	8002564 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3301      	adds	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d9b5      	bls.n	80024dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e175      	b.n	80028b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	f040 8164 	bne.w	80028ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d005      	beq.n	80025fe <HAL_GPIO_Init+0x56>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d130      	bne.n	8002660 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 0201 	and.w	r2, r3, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d017      	beq.n	800269c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d123      	bne.n	80026f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80be 	beq.w	80028ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_GPIO_Init+0x324>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800274a:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <HAL_GPIO_Init+0x328>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_GPIO_Init+0x32c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d037      	beq.n	80027e6 <HAL_GPIO_Init+0x23e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <HAL_GPIO_Init+0x330>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d031      	beq.n	80027e2 <HAL_GPIO_Init+0x23a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a56      	ldr	r2, [pc, #344]	; (80028dc <HAL_GPIO_Init+0x334>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02b      	beq.n	80027de <HAL_GPIO_Init+0x236>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a55      	ldr	r2, [pc, #340]	; (80028e0 <HAL_GPIO_Init+0x338>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d025      	beq.n	80027da <HAL_GPIO_Init+0x232>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_GPIO_Init+0x33c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01f      	beq.n	80027d6 <HAL_GPIO_Init+0x22e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <HAL_GPIO_Init+0x340>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d019      	beq.n	80027d2 <HAL_GPIO_Init+0x22a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_GPIO_Init+0x344>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_GPIO_Init+0x226>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a51      	ldr	r2, [pc, #324]	; (80028f0 <HAL_GPIO_Init+0x348>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00d      	beq.n	80027ca <HAL_GPIO_Init+0x222>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <HAL_GPIO_Init+0x34c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x21e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4f      	ldr	r2, [pc, #316]	; (80028f8 <HAL_GPIO_Init+0x350>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_GPIO_Init+0x21a>
 80027be:	2309      	movs	r3, #9
 80027c0:	e012      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027c2:	230a      	movs	r3, #10
 80027c4:	e010      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027c6:	2308      	movs	r3, #8
 80027c8:	e00e      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e00c      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x240>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x328>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a34      	ldr	r2, [pc, #208]	; (80028fc <HAL_GPIO_Init+0x354>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_GPIO_Init+0x354>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_GPIO_Init+0x354>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a14      	ldr	r2, [pc, #80]	; (80028fc <HAL_GPIO_Init+0x354>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f ae86 	bls.w	80025c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021400 	.word	0x40021400
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40021c00 	.word	0x40021c00
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40022400 	.word	0x40022400
 80028fc:	40013c00 	.word	0x40013c00

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002934:	b08f      	sub	sp, #60	; 0x3c
 8002936:	af0a      	add	r7, sp, #40	; 0x28
 8002938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e116      	b.n	8002b72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fce0 	bl	8001324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2203      	movs	r2, #3
 8002968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 f8dc 	bl	8005b40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	687e      	ldr	r6, [r7, #4]
 8002990:	466d      	mov	r5, sp
 8002992:	f106 0410 	add.w	r4, r6, #16
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a6:	1d33      	adds	r3, r6, #4
 80029a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f003 f870 	bl	8005a90 <USB_CoreInit>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0d7      	b.n	8002b72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 f8ca 	bl	8005b62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e04a      	b.n	8002a6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	333d      	adds	r3, #61	; 0x3d
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	b298      	uxth	r0, r3
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3344      	adds	r3, #68	; 0x44
 8002a10:	4602      	mov	r2, r0
 8002a12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3340      	adds	r3, #64	; 0x40
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3348      	adds	r3, #72	; 0x48
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	334c      	adds	r3, #76	; 0x4c
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3354      	adds	r3, #84	; 0x54
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	3301      	adds	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3af      	bcc.n	80029d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e044      	b.n	8002b04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3b5      	bcc.n	8002a7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	687e      	ldr	r6, [r7, #4]
 8002b16:	466d      	mov	r5, sp
 8002b18:	f106 0410 	add.w	r4, r6, #16
 8002b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b2c:	1d33      	adds	r3, r6, #4
 8002b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b30:	6838      	ldr	r0, [r7, #0]
 8002b32:	f003 f863 	bl	8005bfc <USB_DevInit>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e014      	b.n	8002b72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f80b 	bl	8002b7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fa21 	bl	8005fb2 <USB_DevDisconnect>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	10000003 	.word	0x10000003

08002bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e291      	b.n	800311e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c08:	4b96      	ldr	r3, [pc, #600]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d00c      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c14:	4b93      	ldr	r3, [pc, #588]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d112      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62>
 8002c20:	4b90      	ldr	r3, [pc, #576]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2e:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d06c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x130>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d168      	bne.n	8002d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e26b      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x7a>
 8002c50:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a83      	ldr	r2, [pc, #524]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e02e      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x9c>
 8002c66:	4b7f      	ldr	r3, [pc, #508]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7e      	ldr	r2, [pc, #504]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b7c      	ldr	r3, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7b      	ldr	r2, [pc, #492]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xc0>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a72      	ldr	r2, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fcbc 	bl	8001640 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fcb8 	bl	8001640 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e21f      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe8>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fca8 	bl	8001640 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fca4 	bl	8001640 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e20b      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x110>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d069      	beq.n	8002df6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d22:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d11c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x190>
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e1df      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	493d      	ldr	r1, [pc, #244]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	e040      	b.n	8002df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a38      	ldr	r2, [pc, #224]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fc5a 	bl	8001640 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fc56 	bl	8001640 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1bd      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4929      	ldr	r1, [pc, #164]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	e018      	b.n	8002df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fc36 	bl	8001640 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fc32 	bl	8001640 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e199      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d038      	beq.n	8002e74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d019      	beq.n	8002e3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fc13 	bl	8001640 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fc0f 	bl	8001640 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e176      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x23a>
 8002e3c:	e01a      	b.n	8002e74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_RCC_OscConfig+0x280>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fbf9 	bl	8001640 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe fbf5 	bl	8001640 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d903      	bls.n	8002e68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e15c      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
 8002e64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b91      	ldr	r3, [pc, #580]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80a4 	beq.w	8002fca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a87      	ldr	r2, [pc, #540]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	4b82      	ldr	r3, [pc, #520]	; (80030b4 <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	; (80030b4 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fbbd 	bl	8001640 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fbb9 	bl	8001640 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	; 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e120      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002edc:	4b75      	ldr	r3, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x31a>
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	e02d      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x33c>
 8002f06:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a69      	ldr	r2, [pc, #420]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b67      	ldr	r3, [pc, #412]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a66      	ldr	r2, [pc, #408]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e01c      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x35e>
 8002f28:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a60      	ldr	r2, [pc, #384]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a5d      	ldr	r2, [pc, #372]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002f42:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d015      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fb6d 	bl	8001640 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fb69 	bl	8001640 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0ce      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ee      	beq.n	8002f6a <HAL_RCC_OscConfig+0x386>
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fb57 	bl	8001640 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fb53 	bl	8001640 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80a4 	beq.w	800311c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd4:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d06b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d149      	bne.n	800307c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fb24 	bl	8001640 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fb20 	bl	8001640 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e087      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	3b01      	subs	r3, #1
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	4313      	orrs	r3, r2
 8003040:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003046:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe faf4 	bl	8001640 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe faf0 	bl	8001640 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e057      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x478>
 800307a:	e04f      	b.n	800311c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fada 	bl	8001640 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fad6 	bl	8001640 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e03d      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x4ac>
 80030ae:	e035      	b.n	800311c <HAL_RCC_OscConfig+0x538>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x544>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d028      	beq.n	8003118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d121      	bne.n	8003118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11a      	bne.n	8003118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	3b01      	subs	r3, #1
 8003102:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d0      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d910      	bls.n	8003174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b67      	ldr	r3, [pc, #412]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4965      	ldr	r1, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d040      	beq.n	8003250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e073      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4936      	ldr	r1, [pc, #216]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fa0e 	bl	8001640 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe fa0a 	bl	8001640 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e053      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d210      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 020f 	bic.w	r2, r3, #15
 8003266:	4922      	ldr	r1, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1cc>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1d0>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe f89a 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08009b60 	.word	0x08009b60
 80032fc:	20000010 	.word	0x20000010
 8003300:	20000014 	.word	0x20000014

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b094      	sub	sp, #80	; 0x50
 800330a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	647b      	str	r3, [r7, #68]	; 0x44
 8003310:	2300      	movs	r3, #0
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	2300      	movs	r3, #0
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331c:	4b79      	ldr	r3, [pc, #484]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d00d      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 8003328:	2b08      	cmp	r3, #8
 800332a:	f200 80e1 	bhi.w	80034f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3a>
 8003336:	e0db      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_GetSysClockFreq+0x204>)
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333c:	e0db      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b73      	ldr	r3, [pc, #460]	; (800350c <HAL_RCC_GetSysClockFreq+0x208>)
 8003340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003342:	e0d8      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800334e:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
 8003364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
 800336e:	2300      	movs	r3, #0
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
 8003372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4621      	mov	r1, r4
 8003390:	1a51      	subs	r1, r2, r1
 8003392:	6139      	str	r1, [r7, #16]
 8003394:	4629      	mov	r1, r5
 8003396:	eb63 0301 	sbc.w	r3, r3, r1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a8:	4659      	mov	r1, fp
 80033aa:	018b      	lsls	r3, r1, #6
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b2:	4651      	mov	r1, sl
 80033b4:	018a      	lsls	r2, r1, #6
 80033b6:	4651      	mov	r1, sl
 80033b8:	ebb2 0801 	subs.w	r8, r2, r1
 80033bc:	4659      	mov	r1, fp
 80033be:	eb63 0901 	sbc.w	r9, r3, r1
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d6:	4690      	mov	r8, r2
 80033d8:	4699      	mov	r9, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	eb18 0303 	adds.w	r3, r8, r3
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	462b      	mov	r3, r5
 80033e4:	eb49 0303 	adc.w	r3, r9, r3
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033f6:	4629      	mov	r1, r5
 80033f8:	024b      	lsls	r3, r1, #9
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003400:	4621      	mov	r1, r4
 8003402:	024a      	lsls	r2, r1, #9
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
 800340e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003414:	f7fc fefc 	bl	8000210 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	e058      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	4618      	mov	r0, r3
 800342c:	4611      	mov	r1, r2
 800342e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800343c:	4642      	mov	r2, r8
 800343e:	464b      	mov	r3, r9
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	0159      	lsls	r1, r3, #5
 800344a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344e:	0150      	lsls	r0, r2, #5
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4641      	mov	r1, r8
 8003456:	ebb2 0a01 	subs.w	sl, r2, r1
 800345a:	4649      	mov	r1, r9
 800345c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800346c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003474:	ebb2 040a 	subs.w	r4, r2, sl
 8003478:	eb63 050b 	sbc.w	r5, r3, fp
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	00eb      	lsls	r3, r5, #3
 8003486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348a:	00e2      	lsls	r2, r4, #3
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4643      	mov	r3, r8
 8003492:	18e3      	adds	r3, r4, r3
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	464b      	mov	r3, r9
 8003498:	eb45 0303 	adc.w	r3, r5, r3
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034aa:	4629      	mov	r1, r5
 80034ac:	028b      	lsls	r3, r1, #10
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b4:	4621      	mov	r1, r4
 80034b6:	028a      	lsls	r2, r1, #10
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	61fa      	str	r2, [r7, #28]
 80034c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c8:	f7fc fea2 	bl	8000210 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	3301      	adds	r3, #1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetSysClockFreq+0x204>)
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3750      	adds	r7, #80	; 0x50
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	00f42400 	.word	0x00f42400
 800350c:	007a1200 	.word	0x007a1200

08003510 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_GetHCLKFreq+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000010 	.word	0x20000010

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff0 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	08009b70 	.word	0x08009b70

08003550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003554:	f7ff ffdc 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0b5b      	lsrs	r3, r3, #13
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	08009b70 	.word	0x08009b70

08003578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	220f      	movs	r2, #15
 8003586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_RCC_GetClockConfig+0x5c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0203 	and.w	r2, r3, #3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_RCC_GetClockConfig+0x5c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_GetClockConfig+0x5c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <HAL_RCC_GetClockConfig+0x60>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 020f 	and.w	r2, r3, #15
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40023c00 	.word	0x40023c00

080035dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d012      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003604:	4b69      	ldr	r3, [pc, #420]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a68      	ldr	r2, [pc, #416]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800360e:	6093      	str	r3, [r2, #8]
 8003610:	4b66      	ldr	r3, [pc, #408]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	4964      	ldr	r1, [pc, #400]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003636:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	4959      	ldr	r1, [pc, #356]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003654:	d101      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d017      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003672:	4b4e      	ldr	r3, [pc, #312]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	494a      	ldr	r1, [pc, #296]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003690:	d101      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003692:	2301      	movs	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 808b 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036c0:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	4a39      	ldr	r2, [pc, #228]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ca:	6413      	str	r3, [r2, #64]	; 0x40
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fd ffac 	bl	8001640 <HAL_GetTick>
 80036e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fd ffa8 	bl	8001640 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e357      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800370a:	4b28      	ldr	r3, [pc, #160]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003712:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d035      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	429a      	cmp	r2, r3
 8003726:	d02e      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003730:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003748:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d114      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fd ff70 	bl	8001640 <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd ff6c 	bl	8001640 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e319      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003792:	d111      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037a2:	400b      	ands	r3, r1
 80037a4:	4901      	ldr	r1, [pc, #4]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40007000 	.word	0x40007000
 80037b4:	0ffffcff 	.word	0x0ffffcff
 80037b8:	4baa      	ldr	r3, [pc, #680]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4aa9      	ldr	r2, [pc, #676]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037c2:	6093      	str	r3, [r2, #8]
 80037c4:	4ba7      	ldr	r3, [pc, #668]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	49a4      	ldr	r1, [pc, #656]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d010      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037e2:	4ba0      	ldr	r3, [pc, #640]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	4a9e      	ldr	r2, [pc, #632]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037f2:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	4999      	ldr	r1, [pc, #612]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003810:	4b94      	ldr	r3, [pc, #592]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381e:	4991      	ldr	r1, [pc, #580]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003832:	4b8c      	ldr	r3, [pc, #560]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	4988      	ldr	r1, [pc, #544]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003854:	4b83      	ldr	r3, [pc, #524]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003862:	4980      	ldr	r1, [pc, #512]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003876:	4b7b      	ldr	r3, [pc, #492]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4977      	ldr	r1, [pc, #476]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003898:	4b72      	ldr	r3, [pc, #456]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	496f      	ldr	r1, [pc, #444]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ba:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	f023 020c 	bic.w	r2, r3, #12
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c8:	4966      	ldr	r1, [pc, #408]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038dc:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	495e      	ldr	r1, [pc, #376]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038fe:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390c:	4955      	ldr	r1, [pc, #340]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003942:	4b48      	ldr	r3, [pc, #288]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4944      	ldr	r1, [pc, #272]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	493c      	ldr	r1, [pc, #240]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	4933      	ldr	r1, [pc, #204]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b6:	492b      	ldr	r1, [pc, #172]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d011      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d8:	4922      	ldr	r1, [pc, #136]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e8:	d101      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a18:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a3c:	4909      	ldr	r1, [pc, #36]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d006      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80d9 	beq.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a01      	ldr	r2, [pc, #4]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a62:	e001      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a64:	40023800 	.word	0x40023800
 8003a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fde9 	bl	8001640 <HAL_GetTick>
 8003a6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a72:	f7fd fde5 	bl	8001640 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e194      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d021      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11d      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ab2:	4b61      	ldr	r3, [pc, #388]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	0e1b      	lsrs	r3, r3, #24
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	019a      	lsls	r2, r3, #6
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	071b      	lsls	r3, r3, #28
 8003ad8:	4957      	ldr	r1, [pc, #348]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0a:	d129      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b0c:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b20:	0f1b      	lsrs	r3, r3, #28
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	019a      	lsls	r2, r3, #6
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	071b      	lsls	r3, r3, #28
 8003b40:	493d      	ldr	r1, [pc, #244]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b48:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4e:	f023 021f 	bic.w	r2, r3, #31
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	3b01      	subs	r3, #1
 8003b58:	4937      	ldr	r1, [pc, #220]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b6c:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b72:	0e1b      	lsrs	r3, r3, #24
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b7a:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b80:	0f1b      	lsrs	r3, r3, #28
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	019a      	lsls	r2, r3, #6
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	071b      	lsls	r3, r3, #28
 8003ba0:	4925      	ldr	r1, [pc, #148]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d011      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	019a      	lsls	r2, r3, #6
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	071b      	lsls	r3, r3, #28
 8003bd0:	4919      	ldr	r1, [pc, #100]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd fd2c 	bl	8001640 <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fd fd28 	bl	8001640 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0d7      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 80cd 	bne.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1e:	f7fd fd0f 	bl	8001640 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c26:	f7fd fd0b 	bl	8001640 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	; 0x64
 8003c32:	d903      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0ba      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c3c:	4b5e      	ldr	r3, [pc, #376]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c48:	d0ed      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02e      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d12a      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	0f1b      	lsrs	r3, r3, #28
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	061b      	lsls	r3, r3, #24
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	4944      	ldr	r1, [pc, #272]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cae:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	493d      	ldr	r1, [pc, #244]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d022      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cdc:	d11d      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	0e1b      	lsrs	r3, r3, #24
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	0f1b      	lsrs	r3, r3, #28
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	019a      	lsls	r2, r3, #6
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	061b      	lsls	r3, r3, #24
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	071b      	lsls	r3, r3, #28
 8003d12:	4929      	ldr	r1, [pc, #164]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	0e1b      	lsrs	r3, r3, #24
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	019a      	lsls	r2, r3, #6
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	4917      	ldr	r1, [pc, #92]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4911      	ldr	r1, [pc, #68]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fd fc5c 	bl	8001640 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d8c:	f7fd fc58 	bl	8001640 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e007      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003daa:	d1ef      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e09d      	b.n	8003f0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dde:	d009      	beq.n	8003df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	e005      	b.n	8003df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd f908 	bl	8001024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e34:	d902      	bls.n	8003e3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e002      	b.n	8003e42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e4a:	d007      	beq.n	8003e5c <HAL_SPI_Init+0xa0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e54:	d002      	beq.n	8003e5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 0204 	and.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ed8:	ea42 0103 	orr.w	r1, r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b088      	sub	sp, #32
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_SPI_Transmit+0x22>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e158      	b.n	80041e6 <HAL_SPI_Transmit+0x2d4>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3c:	f7fd fb80 	bl	8001640 <HAL_GetTick>
 8003f40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f56:	e13d      	b.n	80041d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Transmit+0x52>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f68:	e134      	b.n	80041d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb4:	d10f      	bne.n	8003fd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d007      	beq.n	8003ff4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffc:	d94b      	bls.n	8004096 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_Transmit+0xfa>
 8004006:	8afb      	ldrh	r3, [r7, #22]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d13e      	bne.n	800408a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004030:	e02b      	b.n	800408a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d112      	bne.n	8004066 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	881a      	ldrh	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004064:	e011      	b.n	800408a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004066:	f7fd faeb 	bl	8001640 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d803      	bhi.n	800407e <HAL_SPI_Transmit+0x16c>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407c:	d102      	bne.n	8004084 <HAL_SPI_Transmit+0x172>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004088:	e0a4      	b.n	80041d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ce      	bne.n	8004032 <HAL_SPI_Transmit+0x120>
 8004094:	e07c      	b.n	8004190 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Transmit+0x192>
 800409e:	8afb      	ldrh	r3, [r7, #22]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d170      	bne.n	8004186 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d912      	bls.n	80040d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b02      	subs	r3, #2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040d2:	e058      	b.n	8004186 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80040fa:	e044      	b.n	8004186 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d12b      	bne.n	8004162 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d912      	bls.n	800413a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b02      	subs	r3, #2
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004138:	e025      	b.n	8004186 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004160:	e011      	b.n	8004186 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004162:	f7fd fa6d 	bl	8001640 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d803      	bhi.n	800417a <HAL_SPI_Transmit+0x268>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004178:	d102      	bne.n	8004180 <HAL_SPI_Transmit+0x26e>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004184:	e026      	b.n	80041d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1b5      	bne.n	80040fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f949 	bl	800442c <SPI_EndRxTxTransaction>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e000      	b.n	80041d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80041d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004200:	f7fd fa1e 	bl	8001640 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004210:	f7fd fa16 	bl	8001640 <HAL_GetTick>
 8004214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	015b      	lsls	r3, r3, #5
 800421c:	0d1b      	lsrs	r3, r3, #20
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004226:	e054      	b.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422e:	d050      	beq.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004230:	f7fd fa06 	bl	8001640 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	429a      	cmp	r2, r3
 800423e:	d902      	bls.n	8004246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13d      	bne.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425e:	d111      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d004      	beq.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d107      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d10f      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e017      	b.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d19b      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000010 	.word	0x20000010

08004300 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004312:	f7fd f995 	bl	8001640 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	4413      	add	r3, r2
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004322:	f7fd f98d 	bl	8001640 <HAL_GetTick>
 8004326:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00da      	lsls	r2, r3, #3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	0d1b      	lsrs	r3, r3, #20
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004348:	e060      	b.n	800440c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004350:	d107      	bne.n	8004362 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004360:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004368:	d050      	beq.n	800440c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800436a:	f7fd f969 	bl	8001640 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004376:	429a      	cmp	r2, r3
 8004378:	d902      	bls.n	8004380 <SPI_WaitFifoStateUntilTimeout+0x80>
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d13d      	bne.n	80043fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800438e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004398:	d111      	bne.n	80043be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a2:	d004      	beq.n	80043ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d107      	bne.n	80043be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c6:	d10f      	bne.n	80043e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e010      	b.n	800441e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3b01      	subs	r3, #1
 800440a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d196      	bne.n	800434a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000010 	.word	0x20000010

0800442c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2200      	movs	r2, #0
 8004440:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ff5b 	bl	8004300 <SPI_WaitFifoStateUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e046      	b.n	80044ee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <SPI_EndRxTxTransaction+0xcc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <SPI_EndRxTxTransaction+0xd0>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	0d5b      	lsrs	r3, r3, #21
 800446c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447e:	d112      	bne.n	80044a6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff feb0 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e023      	b.n	80044ee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d0f2      	beq.n	80044a6 <SPI_EndRxTxTransaction+0x7a>
 80044c0:	e000      	b.n	80044c4 <SPI_EndRxTxTransaction+0x98>
        break;
 80044c2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff15 	bl	8004300 <SPI_WaitFifoStateUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e000      	b.n	80044ee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000010 	.word	0x20000010
 80044fc:	165e9f81 	.word	0x165e9f81

08004500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e049      	b.n	80045a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f841 	bl	80045ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 fa00 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e054      	b.n	8004686 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a26      	ldr	r2, [pc, #152]	; (8004694 <HAL_TIM_Base_Start_IT+0xd0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d01d      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <HAL_TIM_Base_Start_IT+0xd4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <HAL_TIM_Base_Start_IT+0xd8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x80>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_TIM_Base_Start_IT+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d115      	bne.n	8004670 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_TIM_Base_Start_IT+0xec>)
 800464c:	4013      	ands	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b06      	cmp	r3, #6
 8004654:	d015      	beq.n	8004682 <HAL_TIM_Base_Start_IT+0xbe>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d011      	beq.n	8004682 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	e008      	b.n	8004682 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e000      	b.n	8004684 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40010400 	.word	0x40010400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40001800 	.word	0x40001800
 80046b0:	00010007 	.word	0x00010007

080046b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0202 	mvn.w	r2, #2
 80046e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f905 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8f7 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f908 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d122      	bne.n	8004764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d11b      	bne.n	8004764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0204 	mvn.w	r2, #4
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8db 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8cd 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8de 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b08      	cmp	r3, #8
 8004770:	d122      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b08      	cmp	r3, #8
 800477e:	d11b      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0208 	mvn.w	r2, #8
 8004788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2204      	movs	r2, #4
 800478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8b1 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8a3 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f8b4 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d122      	bne.n	800480c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d11b      	bne.n	800480c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0210 	mvn.w	r2, #16
 80047dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2208      	movs	r2, #8
 80047e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f887 	bl	8004906 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f879 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f88a 	bl	800491a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0201 	mvn.w	r2, #1
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fafe 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d10e      	bne.n	8004864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b80      	cmp	r3, #128	; 0x80
 8004852:	d107      	bne.n	8004864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f91a 	bl	8004a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f90d 	bl	8004aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f838 	bl	800492e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0220 	mvn.w	r2, #32
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8cd 	bl	8004a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a40      	ldr	r2, [pc, #256]	; (8004a58 <TIM_Base_SetConfig+0x114>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d00f      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3d      	ldr	r2, [pc, #244]	; (8004a5c <TIM_Base_SetConfig+0x118>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00b      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3c      	ldr	r2, [pc, #240]	; (8004a60 <TIM_Base_SetConfig+0x11c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d007      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <TIM_Base_SetConfig+0x120>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3a      	ldr	r2, [pc, #232]	; (8004a68 <TIM_Base_SetConfig+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d108      	bne.n	8004996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2f      	ldr	r2, [pc, #188]	; (8004a58 <TIM_Base_SetConfig+0x114>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02b      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d027      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <TIM_Base_SetConfig+0x118>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d023      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <TIM_Base_SetConfig+0x11c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01f      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <TIM_Base_SetConfig+0x120>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01b      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a29      	ldr	r2, [pc, #164]	; (8004a68 <TIM_Base_SetConfig+0x124>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d017      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a28      	ldr	r2, [pc, #160]	; (8004a6c <TIM_Base_SetConfig+0x128>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <TIM_Base_SetConfig+0x12c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00f      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <TIM_Base_SetConfig+0x130>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00b      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <TIM_Base_SetConfig+0x134>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a24      	ldr	r2, [pc, #144]	; (8004a7c <TIM_Base_SetConfig+0x138>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <TIM_Base_SetConfig+0x13c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <TIM_Base_SetConfig+0x114>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0xf8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <TIM_Base_SetConfig+0x124>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d103      	bne.n	8004a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	615a      	str	r2, [r3, #20]
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40010400 	.word	0x40010400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800
 8004a78:	40001800 	.word	0x40001800
 8004a7c:	40001c00 	.word	0x40001c00
 8004a80:	40002000 	.word	0x40002000

08004a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e040      	b.n	8004b54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc fb4e 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb1e 	bl	8005140 <UART_SetConfig>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e022      	b.n	8004b54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fd76 	bl	8005608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fdfd 	bl	800574c <UART_CheckIdleState>
 8004b52:	4603      	mov	r3, r0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b0ba      	sub	sp, #232	; 0xe8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b86:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d115      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00f      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8297 	beq.w	80050e8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
      }
      return;
 8004bc2:	e291      	b.n	80050e8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8117 	beq.w	8004dfc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bde:	4b85      	ldr	r3, [pc, #532]	; (8004df4 <HAL_UART_IRQHandler+0x298>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 810a 	beq.w	8004dfc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <HAL_UART_IRQHandler+0xbc>
 8004bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0e:	f043 0201 	orr.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d011      	beq.n	8004c48 <HAL_UART_IRQHandler+0xec>
 8004c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2202      	movs	r2, #2
 8004c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3e:	f043 0204 	orr.w	r2, r3, #4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d011      	beq.n	8004c78 <HAL_UART_IRQHandler+0x11c>
 8004c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2204      	movs	r2, #4
 8004c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6e:	f043 0202 	orr.w	r2, r3, #2
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	f043 0208 	orr.w	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x18a>
 8004cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 81fd 	beq.w	80050ec <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d04f      	beq.n	8004dde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fe01 	bl	8005946 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d141      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1d9      	bne.n	8004d52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d013      	beq.n	8004dce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <HAL_UART_IRQHandler+0x29c>)
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fe74 	bl	8001aa0 <HAL_DMA_Abort_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d017      	beq.n	8004dee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dcc:	e00f      	b.n	8004dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9a0 	bl	8005114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	e00b      	b.n	8004dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f99c 	bl	8005114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	e007      	b.n	8004dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f998 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004dec:	e17e      	b.n	80050ec <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dee:	bf00      	nop
    return;
 8004df0:	e17c      	b.n	80050ec <HAL_UART_IRQHandler+0x590>
 8004df2:	bf00      	nop
 8004df4:	04000120 	.word	0x04000120
 8004df8:	08005a0f 	.word	0x08005a0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 814c 	bne.w	800509e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8145 	beq.w	800509e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 813e 	beq.w	800509e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2210      	movs	r2, #16
 8004e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	f040 80b6 	bne.w	8004fa6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8150 	beq.w	80050f0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	f080 8148 	bcs.w	80050f0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e74:	f000 8086 	beq.w	8004f84 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ea6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1da      	bne.n	8004e78 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ee6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e1      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e3      	bne.n	8004efe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f54:	f023 0310 	bic.w	r3, r3, #16
 8004f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e4      	bne.n	8004f44 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc fd1e 	bl	80019c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f8c2 	bl	8005128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fa4:	e0a4      	b.n	80050f0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8096 	beq.w	80050f4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8091 	beq.w	80050f4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e4      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	623b      	str	r3, [r7, #32]
   return(result);
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800502c:	633a      	str	r2, [r7, #48]	; 0x30
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e3      	bne.n	8005008 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	60fb      	str	r3, [r7, #12]
   return(result);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	617b      	str	r3, [r7, #20]
   return(result);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e4      	bne.n	8005054 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f846 	bl	8005128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800509c:	e02a      	b.n	80050f4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00e      	beq.n	80050c8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01c      	beq.n	80050f8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
    }
    return;
 80050c6:	e017      	b.n	80050f8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d012      	beq.n	80050fa <HAL_UART_IRQHandler+0x59e>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00c      	beq.n	80050fa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fcaa 	bl	8005a3a <UART_EndTransmit_IT>
    return;
 80050e6:	e008      	b.n	80050fa <HAL_UART_IRQHandler+0x59e>
      return;
 80050e8:	bf00      	nop
 80050ea:	e006      	b.n	80050fa <HAL_UART_IRQHandler+0x59e>
    return;
 80050ec:	bf00      	nop
 80050ee:	e004      	b.n	80050fa <HAL_UART_IRQHandler+0x59e>
      return;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <HAL_UART_IRQHandler+0x59e>
      return;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <HAL_UART_IRQHandler+0x59e>
    return;
 80050f8:	bf00      	nop
  }

}
 80050fa:	37e8      	adds	r7, #232	; 0xe8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4ba6      	ldr	r3, [pc, #664]	; (8005404 <UART_SetConfig+0x2c4>)
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6979      	ldr	r1, [r7, #20]
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a94      	ldr	r2, [pc, #592]	; (8005408 <UART_SetConfig+0x2c8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d120      	bne.n	80051fe <UART_SetConfig+0xbe>
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <UART_SetConfig+0x2cc>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d816      	bhi.n	80051f8 <UART_SetConfig+0xb8>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x90>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051e7 	.word	0x080051e7
 80051dc:	080051f3 	.word	0x080051f3
 80051e0:	2301      	movs	r3, #1
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e150      	b.n	8005488 <UART_SetConfig+0x348>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e14d      	b.n	8005488 <UART_SetConfig+0x348>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e14a      	b.n	8005488 <UART_SetConfig+0x348>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e147      	b.n	8005488 <UART_SetConfig+0x348>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e144      	b.n	8005488 <UART_SetConfig+0x348>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a83      	ldr	r2, [pc, #524]	; (8005410 <UART_SetConfig+0x2d0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d132      	bne.n	800526e <UART_SetConfig+0x12e>
 8005208:	4b80      	ldr	r3, [pc, #512]	; (800540c <UART_SetConfig+0x2cc>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d828      	bhi.n	8005268 <UART_SetConfig+0x128>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0xdc>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005251 	.word	0x08005251
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	0800525d 	.word	0x0800525d
 8005230:	08005269 	.word	0x08005269
 8005234:	08005269 	.word	0x08005269
 8005238:	08005269 	.word	0x08005269
 800523c:	08005257 	.word	0x08005257
 8005240:	08005269 	.word	0x08005269
 8005244:	08005269 	.word	0x08005269
 8005248:	08005269 	.word	0x08005269
 800524c:	08005263 	.word	0x08005263
 8005250:	2300      	movs	r3, #0
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e118      	b.n	8005488 <UART_SetConfig+0x348>
 8005256:	2302      	movs	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e115      	b.n	8005488 <UART_SetConfig+0x348>
 800525c:	2304      	movs	r3, #4
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e112      	b.n	8005488 <UART_SetConfig+0x348>
 8005262:	2308      	movs	r3, #8
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e10f      	b.n	8005488 <UART_SetConfig+0x348>
 8005268:	2310      	movs	r3, #16
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e10c      	b.n	8005488 <UART_SetConfig+0x348>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a68      	ldr	r2, [pc, #416]	; (8005414 <UART_SetConfig+0x2d4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <UART_SetConfig+0x17a>
 8005278:	4b64      	ldr	r3, [pc, #400]	; (800540c <UART_SetConfig+0x2cc>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005282:	2b30      	cmp	r3, #48	; 0x30
 8005284:	d013      	beq.n	80052ae <UART_SetConfig+0x16e>
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	d814      	bhi.n	80052b4 <UART_SetConfig+0x174>
 800528a:	2b20      	cmp	r3, #32
 800528c:	d009      	beq.n	80052a2 <UART_SetConfig+0x162>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d810      	bhi.n	80052b4 <UART_SetConfig+0x174>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <UART_SetConfig+0x15c>
 8005296:	2b10      	cmp	r3, #16
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x168>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x174>
 800529c:	2300      	movs	r3, #0
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e0f2      	b.n	8005488 <UART_SetConfig+0x348>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e0ef      	b.n	8005488 <UART_SetConfig+0x348>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e0ec      	b.n	8005488 <UART_SetConfig+0x348>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e0e9      	b.n	8005488 <UART_SetConfig+0x348>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e0e6      	b.n	8005488 <UART_SetConfig+0x348>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a56      	ldr	r2, [pc, #344]	; (8005418 <UART_SetConfig+0x2d8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d120      	bne.n	8005306 <UART_SetConfig+0x1c6>
 80052c4:	4b51      	ldr	r3, [pc, #324]	; (800540c <UART_SetConfig+0x2cc>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ce:	2bc0      	cmp	r3, #192	; 0xc0
 80052d0:	d013      	beq.n	80052fa <UART_SetConfig+0x1ba>
 80052d2:	2bc0      	cmp	r3, #192	; 0xc0
 80052d4:	d814      	bhi.n	8005300 <UART_SetConfig+0x1c0>
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d009      	beq.n	80052ee <UART_SetConfig+0x1ae>
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d810      	bhi.n	8005300 <UART_SetConfig+0x1c0>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <UART_SetConfig+0x1a8>
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d006      	beq.n	80052f4 <UART_SetConfig+0x1b4>
 80052e6:	e00b      	b.n	8005300 <UART_SetConfig+0x1c0>
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e0cc      	b.n	8005488 <UART_SetConfig+0x348>
 80052ee:	2302      	movs	r3, #2
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e0c9      	b.n	8005488 <UART_SetConfig+0x348>
 80052f4:	2304      	movs	r3, #4
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0c6      	b.n	8005488 <UART_SetConfig+0x348>
 80052fa:	2308      	movs	r3, #8
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0c3      	b.n	8005488 <UART_SetConfig+0x348>
 8005300:	2310      	movs	r3, #16
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0c0      	b.n	8005488 <UART_SetConfig+0x348>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a44      	ldr	r2, [pc, #272]	; (800541c <UART_SetConfig+0x2dc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d125      	bne.n	800535c <UART_SetConfig+0x21c>
 8005310:	4b3e      	ldr	r3, [pc, #248]	; (800540c <UART_SetConfig+0x2cc>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d017      	beq.n	8005350 <UART_SetConfig+0x210>
 8005320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005324:	d817      	bhi.n	8005356 <UART_SetConfig+0x216>
 8005326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532a:	d00b      	beq.n	8005344 <UART_SetConfig+0x204>
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d811      	bhi.n	8005356 <UART_SetConfig+0x216>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <UART_SetConfig+0x1fe>
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d006      	beq.n	800534a <UART_SetConfig+0x20a>
 800533c:	e00b      	b.n	8005356 <UART_SetConfig+0x216>
 800533e:	2300      	movs	r3, #0
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e0a1      	b.n	8005488 <UART_SetConfig+0x348>
 8005344:	2302      	movs	r3, #2
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e09e      	b.n	8005488 <UART_SetConfig+0x348>
 800534a:	2304      	movs	r3, #4
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e09b      	b.n	8005488 <UART_SetConfig+0x348>
 8005350:	2308      	movs	r3, #8
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e098      	b.n	8005488 <UART_SetConfig+0x348>
 8005356:	2310      	movs	r3, #16
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e095      	b.n	8005488 <UART_SetConfig+0x348>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <UART_SetConfig+0x2e0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d125      	bne.n	80053b2 <UART_SetConfig+0x272>
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <UART_SetConfig+0x2cc>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005374:	d017      	beq.n	80053a6 <UART_SetConfig+0x266>
 8005376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537a:	d817      	bhi.n	80053ac <UART_SetConfig+0x26c>
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005380:	d00b      	beq.n	800539a <UART_SetConfig+0x25a>
 8005382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005386:	d811      	bhi.n	80053ac <UART_SetConfig+0x26c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <UART_SetConfig+0x254>
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d006      	beq.n	80053a0 <UART_SetConfig+0x260>
 8005392:	e00b      	b.n	80053ac <UART_SetConfig+0x26c>
 8005394:	2301      	movs	r3, #1
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e076      	b.n	8005488 <UART_SetConfig+0x348>
 800539a:	2302      	movs	r3, #2
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e073      	b.n	8005488 <UART_SetConfig+0x348>
 80053a0:	2304      	movs	r3, #4
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e070      	b.n	8005488 <UART_SetConfig+0x348>
 80053a6:	2308      	movs	r3, #8
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e06d      	b.n	8005488 <UART_SetConfig+0x348>
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e06a      	b.n	8005488 <UART_SetConfig+0x348>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <UART_SetConfig+0x2e4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d138      	bne.n	800542e <UART_SetConfig+0x2ee>
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <UART_SetConfig+0x2cc>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053ca:	d017      	beq.n	80053fc <UART_SetConfig+0x2bc>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d0:	d82a      	bhi.n	8005428 <UART_SetConfig+0x2e8>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x2b0>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d824      	bhi.n	8005428 <UART_SetConfig+0x2e8>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <UART_SetConfig+0x2aa>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x2b6>
 80053e8:	e01e      	b.n	8005428 <UART_SetConfig+0x2e8>
 80053ea:	2300      	movs	r3, #0
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e04b      	b.n	8005488 <UART_SetConfig+0x348>
 80053f0:	2302      	movs	r3, #2
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e048      	b.n	8005488 <UART_SetConfig+0x348>
 80053f6:	2304      	movs	r3, #4
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e045      	b.n	8005488 <UART_SetConfig+0x348>
 80053fc:	2308      	movs	r3, #8
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e042      	b.n	8005488 <UART_SetConfig+0x348>
 8005402:	bf00      	nop
 8005404:	efff69f3 	.word	0xefff69f3
 8005408:	40011000 	.word	0x40011000
 800540c:	40023800 	.word	0x40023800
 8005410:	40004400 	.word	0x40004400
 8005414:	40004800 	.word	0x40004800
 8005418:	40004c00 	.word	0x40004c00
 800541c:	40005000 	.word	0x40005000
 8005420:	40011400 	.word	0x40011400
 8005424:	40007800 	.word	0x40007800
 8005428:	2310      	movs	r3, #16
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e02c      	b.n	8005488 <UART_SetConfig+0x348>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a72      	ldr	r2, [pc, #456]	; (80055fc <UART_SetConfig+0x4bc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d125      	bne.n	8005484 <UART_SetConfig+0x344>
 8005438:	4b71      	ldr	r3, [pc, #452]	; (8005600 <UART_SetConfig+0x4c0>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005442:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005446:	d017      	beq.n	8005478 <UART_SetConfig+0x338>
 8005448:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800544c:	d817      	bhi.n	800547e <UART_SetConfig+0x33e>
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d00b      	beq.n	800546c <UART_SetConfig+0x32c>
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	d811      	bhi.n	800547e <UART_SetConfig+0x33e>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <UART_SetConfig+0x326>
 800545e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005462:	d006      	beq.n	8005472 <UART_SetConfig+0x332>
 8005464:	e00b      	b.n	800547e <UART_SetConfig+0x33e>
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e00d      	b.n	8005488 <UART_SetConfig+0x348>
 800546c:	2302      	movs	r3, #2
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e00a      	b.n	8005488 <UART_SetConfig+0x348>
 8005472:	2304      	movs	r3, #4
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e007      	b.n	8005488 <UART_SetConfig+0x348>
 8005478:	2308      	movs	r3, #8
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e004      	b.n	8005488 <UART_SetConfig+0x348>
 800547e:	2310      	movs	r3, #16
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e001      	b.n	8005488 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	d15b      	bne.n	800554a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005492:	7ffb      	ldrb	r3, [r7, #31]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d828      	bhi.n	80054ea <UART_SetConfig+0x3aa>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0x360>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054eb 	.word	0x080054eb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe f830 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80054c8:	61b8      	str	r0, [r7, #24]
        break;
 80054ca:	e013      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe f840 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 80054d0:	61b8      	str	r0, [r7, #24]
        break;
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <UART_SetConfig+0x4c4>)
 80054d6:	61bb      	str	r3, [r7, #24]
        break;
 80054d8:	e00c      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fd ff13 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80054de:	61b8      	str	r0, [r7, #24]
        break;
 80054e0:	e008      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	61bb      	str	r3, [r7, #24]
        break;
 80054e8:	e004      	b.n	80054f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77bb      	strb	r3, [r7, #30]
        break;
 80054f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d074      	beq.n	80055e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	005a      	lsls	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d916      	bls.n	8005544 <UART_SetConfig+0x404>
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d212      	bcs.n	8005544 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f023 030f 	bic.w	r3, r3, #15
 8005526:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	b29a      	uxth	r2, r3
 8005534:	89fb      	ldrh	r3, [r7, #14]
 8005536:	4313      	orrs	r3, r2
 8005538:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	89fa      	ldrh	r2, [r7, #14]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e04f      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	77bb      	strb	r3, [r7, #30]
 8005548:	e04c      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d828      	bhi.n	80055a2 <UART_SetConfig+0x462>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x418>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055a3 	.word	0x080055a3
 8005568:	08005593 	.word	0x08005593
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055a3 	.word	0x080055a3
 8005574:	080055a3 	.word	0x080055a3
 8005578:	0800559b 	.word	0x0800559b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7fd ffd4 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8005580:	61b8      	str	r0, [r7, #24]
        break;
 8005582:	e013      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fd ffe4 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 8005588:	61b8      	str	r0, [r7, #24]
        break;
 800558a:	e00f      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <UART_SetConfig+0x4c4>)
 800558e:	61bb      	str	r3, [r7, #24]
        break;
 8005590:	e00c      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005592:	f7fd feb7 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8005596:	61b8      	str	r0, [r7, #24]
        break;
 8005598:	e008      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559e:	61bb      	str	r3, [r7, #24]
        break;
 80055a0:	e004      	b.n	80055ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77bb      	strb	r3, [r7, #30]
        break;
 80055aa:	bf00      	nop
    }

    if (pclk != 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d018      	beq.n	80055e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	085a      	lsrs	r2, r3, #1
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	441a      	add	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b0f      	cmp	r3, #15
 80055ca:	d909      	bls.n	80055e0 <UART_SetConfig+0x4a0>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d2:	d205      	bcs.n	80055e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	e001      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40007c00 	.word	0x40007c00
 8005600:	40023800 	.word	0x40023800
 8005604:	00f42400 	.word	0x00f42400

08005608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005706:	d10a      	bne.n	800571e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af02      	add	r7, sp, #8
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800575c:	f7fb ff70 	bl	8001640 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b08      	cmp	r3, #8
 800576e:	d10e      	bne.n	800578e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f81b 	bl	80057ba <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e011      	b.n	80057b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b09c      	sub	sp, #112	; 0x70
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ca:	e0a7      	b.n	800591c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d2:	f000 80a3 	beq.w	800591c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d6:	f7fb ff33 	bl	8001640 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <UART_WaitOnFlagUntilTimeout+0x32>
 80057e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d13f      	bne.n	800586c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005800:	667b      	str	r3, [r7, #100]	; 0x64
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800580a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800580c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e6      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	663b      	str	r3, [r7, #96]	; 0x60
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3308      	adds	r3, #8
 800583c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800583e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800584c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e5      	bne.n	800581e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e068      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d050      	beq.n	800591c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005888:	d148      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005892:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
 80058b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e6      	bne.n	8005894 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058e6:	623a      	str	r2, [r7, #32]
 80058e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69f9      	ldr	r1, [r7, #28]
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e010      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4013      	ands	r3, r2
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	429a      	cmp	r2, r3
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	429a      	cmp	r2, r3
 8005938:	f43f af48 	beq.w	80057cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3770      	adds	r7, #112	; 0x70
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005946:	b480      	push	{r7}
 8005948:	b095      	sub	sp, #84	; 0x54
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596c:	643b      	str	r3, [r7, #64]	; 0x40
 800596e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	64bb      	str	r3, [r7, #72]	; 0x48
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e5      	bne.n	8005980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d118      	bne.n	80059ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f023 0310 	bic.w	r3, r3, #16
 80059d0:	647b      	str	r3, [r7, #68]	; 0x44
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	613b      	str	r3, [r7, #16]
   return(result);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e6      	bne.n	80059bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a02:	bf00      	nop
 8005a04:	3754      	adds	r7, #84	; 0x54
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff fb71 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b088      	sub	sp, #32
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fb3d 	bl	8005100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a86:	bf00      	nop
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a90:	b084      	sub	sp, #16
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	f107 001c 	add.w	r0, r7, #28
 8005a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d120      	bne.n	8005aea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	4b20      	ldr	r3, [pc, #128]	; (8005b3c <USB_CoreInit+0xac>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa96 	bl	8006010 <USB_CoreReset>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]
 8005ae8:	e010      	b.n	8005b0c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa8a 	bl	8006010 <USB_CoreReset>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10b      	bne.n	8005b2a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f043 0206 	orr.w	r2, r3, #6
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b36:	b004      	add	sp, #16
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	ffbdffbf 	.word	0xffbdffbf

08005b40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 0201 	bic.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d115      	bne.n	8005bb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b90:	2001      	movs	r0, #1
 8005b92:	f7fb fd61 	bl	8001658 <HAL_Delay>
      ms++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa29 	bl	8005ff4 <USB_GetMode>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d01e      	beq.n	8005be6 <USB_SetCurrentMode+0x84>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b31      	cmp	r3, #49	; 0x31
 8005bac:	d9f0      	bls.n	8005b90 <USB_SetCurrentMode+0x2e>
 8005bae:	e01a      	b.n	8005be6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d115      	bne.n	8005be2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	f7fb fd48 	bl	8001658 <HAL_Delay>
      ms++;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa10 	bl	8005ff4 <USB_GetMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <USB_SetCurrentMode+0x84>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b31      	cmp	r3, #49	; 0x31
 8005bde:	d9f0      	bls.n	8005bc2 <USB_SetCurrentMode+0x60>
 8005be0:	e001      	b.n	8005be6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e005      	b.n	8005bf2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b32      	cmp	r3, #50	; 0x32
 8005bea:	d101      	bne.n	8005bf0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e009      	b.n	8005c30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	3340      	adds	r3, #64	; 0x40
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b0e      	cmp	r3, #14
 8005c34:	d9f2      	bls.n	8005c1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11c      	bne.n	8005c76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4a:	f043 0302 	orr.w	r3, r3, #2
 8005c4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e005      	b.n	8005c82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	4619      	mov	r1, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	680b      	ldr	r3, [r1, #0]
 8005ca0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d10c      	bne.n	8005cc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cae:	2100      	movs	r1, #0
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f965 	bl	8005f80 <USB_SetDevSpeed>
 8005cb6:	e008      	b.n	8005cca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cb8:	2101      	movs	r1, #1
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f960 	bl	8005f80 <USB_SetDevSpeed>
 8005cc0:	e003      	b.n	8005cca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cc2:	2103      	movs	r1, #3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f95b 	bl	8005f80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cca:	2110      	movs	r1, #16
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8f3 	bl	8005eb8 <USB_FlushTxFifo>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f91f 	bl	8005f20 <USB_FlushRxFifo>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	e043      	b.n	8005d9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d2c:	d118      	bne.n	8005d60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	461a      	mov	r2, r3
 8005d42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e013      	b.n	8005d72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	461a      	mov	r2, r3
 8005d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e008      	b.n	8005d72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	461a      	mov	r2, r3
 8005d92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3b7      	bcc.n	8005d16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e043      	b.n	8005e34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc2:	d118      	bne.n	8005df6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e013      	b.n	8005e08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	461a      	mov	r2, r3
 8005dee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	e008      	b.n	8005e08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	461a      	mov	r2, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	461a      	mov	r2, r3
 8005e16:	2300      	movs	r3, #0
 8005e18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3b7      	bcc.n	8005dac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f043 0210 	orr.w	r2, r3, #16
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699a      	ldr	r2, [r3, #24]
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <USB_DevInit+0x2b4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f043 0208 	orr.w	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <USB_DevInit+0x2b8>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eac:	b004      	add	sp, #16
 8005eae:	4770      	bx	lr
 8005eb0:	803c3800 	.word	0x803c3800
 8005eb4:	40000004 	.word	0x40000004

08005eb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <USB_FlushTxFifo+0x64>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d901      	bls.n	8005ed8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e01b      	b.n	8005f10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	daf2      	bge.n	8005ec6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	019b      	lsls	r3, r3, #6
 8005ee8:	f043 0220 	orr.w	r2, r3, #32
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <USB_FlushTxFifo+0x64>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e006      	b.n	8005f10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d0f0      	beq.n	8005ef0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	00030d40 	.word	0x00030d40

08005f20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <USB_FlushRxFifo+0x5c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e018      	b.n	8005f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	daf2      	bge.n	8005f2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <USB_FlushRxFifo+0x5c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d901      	bls.n	8005f62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e006      	b.n	8005f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d0f0      	beq.n	8005f50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	00030d40 	.word	0x00030d40

08005f80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fcc:	f023 0303 	bic.w	r3, r3, #3
 8005fd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0301 	and.w	r3, r3, #1
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <USB_CoreReset+0x64>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e01b      	b.n	8006066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	daf2      	bge.n	800601c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <USB_CoreReset+0x64>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d0f0      	beq.n	8006046 <USB_CoreReset+0x36>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	00030d40 	.word	0x00030d40

08006078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800608e:	f3ef 8305 	mrs	r3, IPSR
 8006092:	60bb      	str	r3, [r7, #8]
  return(result);
 8006094:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609a:	f3ef 8310 	mrs	r3, PRIMASK
 800609e:	607b      	str	r3, [r7, #4]
  return(result);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060a6:	f3ef 8311 	mrs	r3, BASEPRI
 80060aa:	603b      	str	r3, [r7, #0]
  return(result);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <osKernelInitialize+0x3a>
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <osKernelInitialize+0x64>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d103      	bne.n	80060c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80060ba:	f06f 0305 	mvn.w	r3, #5
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e00c      	b.n	80060dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060c2:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <osKernelInitialize+0x64>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <osKernelInitialize+0x64>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000a34 	.word	0x20000a34

080060f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f6:	f3ef 8305 	mrs	r3, IPSR
 80060fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80060fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10f      	bne.n	8006122 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006102:	f3ef 8310 	mrs	r3, PRIMASK
 8006106:	607b      	str	r3, [r7, #4]
  return(result);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d105      	bne.n	800611a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800610e:	f3ef 8311 	mrs	r3, BASEPRI
 8006112:	603b      	str	r3, [r7, #0]
  return(result);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <osKernelStart+0x3a>
 800611a:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <osKernelStart+0x68>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d103      	bne.n	800612a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006122:	f06f 0305 	mvn.w	r3, #5
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e010      	b.n	800614c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <osKernelStart+0x68>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d109      	bne.n	8006146 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006132:	f7ff ffa1 	bl	8006078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <osKernelStart+0x68>)
 8006138:	2202      	movs	r2, #2
 800613a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800613c:	f001 fde4 	bl	8007d08 <vTaskStartScheduler>
      stat = osOK;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e002      	b.n	800614c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800614a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000a34 	.word	0x20000a34

0800615c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b090      	sub	sp, #64	; 0x40
 8006160:	af04      	add	r7, sp, #16
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616c:	f3ef 8305 	mrs	r3, IPSR
 8006170:	61fb      	str	r3, [r7, #28]
  return(result);
 8006172:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 808f 	bne.w	8006298 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617a:	f3ef 8310 	mrs	r3, PRIMASK
 800617e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	617b      	str	r3, [r7, #20]
  return(result);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <osThreadNew+0x3e>
 8006192:	4b44      	ldr	r3, [pc, #272]	; (80062a4 <osThreadNew+0x148>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d07e      	beq.n	8006298 <osThreadNew+0x13c>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d07b      	beq.n	8006298 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80061a4:	2318      	movs	r3, #24
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d045      	beq.n	8006244 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <osThreadNew+0x6a>
        name = attr->name;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d008      	beq.n	80061ec <osThreadNew+0x90>
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b38      	cmp	r3, #56	; 0x38
 80061de:	d805      	bhi.n	80061ec <osThreadNew+0x90>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <osThreadNew+0x94>
        return (NULL);
 80061ec:	2300      	movs	r3, #0
 80061ee:	e054      	b.n	800629a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <osThreadNew+0xca>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2ba7      	cmp	r3, #167	; 0xa7
 800620e:	d90a      	bls.n	8006226 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006214:	2b00      	cmp	r3, #0
 8006216:	d006      	beq.n	8006226 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <osThreadNew+0xca>
        mem = 1;
 8006220:	2301      	movs	r3, #1
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	e010      	b.n	8006248 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10c      	bne.n	8006248 <osThreadNew+0xec>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d108      	bne.n	8006248 <osThreadNew+0xec>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <osThreadNew+0xec>
          mem = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	623b      	str	r3, [r7, #32]
 8006242:	e001      	b.n	8006248 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d110      	bne.n	8006270 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f001 fae5 	bl	8007834 <xTaskCreateStatic>
 800626a:	4603      	mov	r3, r0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	e013      	b.n	8006298 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d110      	bne.n	8006298 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	b29a      	uxth	r2, r3
 800627a:	f107 0310 	add.w	r3, r7, #16
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f001 fb36 	bl	80078fa <xTaskCreate>
 800628e:	4603      	mov	r3, r0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d001      	beq.n	8006298 <osThreadNew+0x13c>
          hTask = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006298:	693b      	ldr	r3, [r7, #16]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3730      	adds	r7, #48	; 0x30
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000a34 	.word	0x20000a34

080062a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b0:	f3ef 8305 	mrs	r3, IPSR
 80062b4:	613b      	str	r3, [r7, #16]
  return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10f      	bne.n	80062dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062bc:	f3ef 8310 	mrs	r3, PRIMASK
 80062c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062c8:	f3ef 8311 	mrs	r3, BASEPRI
 80062cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <osDelay+0x3c>
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <osDelay+0x58>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d103      	bne.n	80062e4 <osDelay+0x3c>
    stat = osErrorISR;
 80062dc:	f06f 0305 	mvn.w	r3, #5
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e007      	b.n	80062f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 fcd4 	bl	8007c9c <vTaskDelay>
    }
  }

  return (stat);
 80062f4:	697b      	ldr	r3, [r7, #20]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000a34 	.word	0x20000a34

08006304 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b08c      	sub	sp, #48	; 0x30
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006314:	f3ef 8305 	mrs	r3, IPSR
 8006318:	61bb      	str	r3, [r7, #24]
  return(result);
 800631a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8086 	bne.w	800642e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006322:	f3ef 8310 	mrs	r3, PRIMASK
 8006326:	617b      	str	r3, [r7, #20]
  return(result);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800632e:	f3ef 8311 	mrs	r3, BASEPRI
 8006332:	613b      	str	r3, [r7, #16]
  return(result);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <osSemaphoreNew+0x3e>
 800633a:	4b3f      	ldr	r3, [pc, #252]	; (8006438 <osSemaphoreNew+0x134>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d075      	beq.n	800642e <osSemaphoreNew+0x12a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d072      	beq.n	800642e <osSemaphoreNew+0x12a>
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d86e      	bhi.n	800642e <osSemaphoreNew+0x12a>
    mem = -1;
 8006350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006354:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d006      	beq.n	8006372 <osSemaphoreNew+0x6e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b4f      	cmp	r3, #79	; 0x4f
 800636a:	d902      	bls.n	8006372 <osSemaphoreNew+0x6e>
        mem = 1;
 800636c:	2301      	movs	r3, #1
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	e00c      	b.n	800638c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d108      	bne.n	800638c <osSemaphoreNew+0x88>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <osSemaphoreNew+0x88>
          mem = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	e001      	b.n	800638c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006392:	d04c      	beq.n	800642e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d128      	bne.n	80063ec <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d10a      	bne.n	80063b6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2203      	movs	r2, #3
 80063a6:	9200      	str	r2, [sp, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2100      	movs	r1, #0
 80063ac:	2001      	movs	r0, #1
 80063ae:	f000 fa55 	bl	800685c <xQueueGenericCreateStatic>
 80063b2:	6278      	str	r0, [r7, #36]	; 0x24
 80063b4:	e005      	b.n	80063c2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80063b6:	2203      	movs	r2, #3
 80063b8:	2100      	movs	r1, #0
 80063ba:	2001      	movs	r0, #1
 80063bc:	f000 fad0 	bl	8006960 <xQueueGenericCreate>
 80063c0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d022      	beq.n	800640e <osSemaphoreNew+0x10a>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01f      	beq.n	800640e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80063ce:	2300      	movs	r3, #0
 80063d0:	2200      	movs	r2, #0
 80063d2:	2100      	movs	r1, #0
 80063d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063d6:	f000 fb9b 	bl	8006b10 <xQueueGenericSend>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d016      	beq.n	800640e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80063e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063e2:	f001 f851 	bl	8007488 <vQueueDelete>
            hSemaphore = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ea:	e010      	b.n	800640e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d108      	bne.n	8006404 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	461a      	mov	r2, r3
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fb15 	bl	8006a2a <xQueueCreateCountingSemaphoreStatic>
 8006400:	6278      	str	r0, [r7, #36]	; 0x24
 8006402:	e004      	b.n	800640e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fb4a 	bl	8006aa0 <xQueueCreateCountingSemaphore>
 800640c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <osSemaphoreNew+0x11e>
          name = attr->name;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e001      	b.n	8006426 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006426:	69f9      	ldr	r1, [r7, #28]
 8006428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800642a:	f001 f97b 	bl	8007724 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006430:	4618      	mov	r0, r3
 8006432:	3728      	adds	r7, #40	; 0x28
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000a34 	.word	0x20000a34

0800643c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006454:	f06f 0303 	mvn.w	r3, #3
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	e04b      	b.n	80064f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800645c:	f3ef 8305 	mrs	r3, IPSR
 8006460:	617b      	str	r3, [r7, #20]
  return(result);
 8006462:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10f      	bne.n	8006488 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006468:	f3ef 8310 	mrs	r3, PRIMASK
 800646c:	613b      	str	r3, [r7, #16]
  return(result);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006474:	f3ef 8311 	mrs	r3, BASEPRI
 8006478:	60fb      	str	r3, [r7, #12]
  return(result);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d026      	beq.n	80064ce <osSemaphoreAcquire+0x92>
 8006480:	4b1f      	ldr	r3, [pc, #124]	; (8006500 <osSemaphoreAcquire+0xc4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d122      	bne.n	80064ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800648e:	f06f 0303 	mvn.w	r3, #3
 8006492:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006494:	e02d      	b.n	80064f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	461a      	mov	r2, r3
 80064a0:	2100      	movs	r1, #0
 80064a2:	69b8      	ldr	r0, [r7, #24]
 80064a4:	f000 ff6a 	bl	800737c <xQueueReceiveFromISR>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d003      	beq.n	80064b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80064ae:	f06f 0302 	mvn.w	r3, #2
 80064b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80064b4:	e01d      	b.n	80064f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01a      	beq.n	80064f2 <osSemaphoreAcquire+0xb6>
 80064bc:	4b11      	ldr	r3, [pc, #68]	; (8006504 <osSemaphoreAcquire+0xc8>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80064cc:	e011      	b.n	80064f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	69b8      	ldr	r0, [r7, #24]
 80064d2:	f000 fe3f 	bl	8007154 <xQueueSemaphoreTake>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d00b      	beq.n	80064f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80064e2:	f06f 0301 	mvn.w	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e004      	b.n	80064f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80064ea:	f06f 0302 	mvn.w	r3, #2
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e000      	b.n	80064f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80064f2:	bf00      	nop
      }
    }
  }

  return (stat);
 80064f4:	69fb      	ldr	r3, [r7, #28]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000a34 	.word	0x20000a34
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800651e:	f06f 0303 	mvn.w	r3, #3
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	e03e      	b.n	80065a4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006526:	f3ef 8305 	mrs	r3, IPSR
 800652a:	617b      	str	r3, [r7, #20]
  return(result);
 800652c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	613b      	str	r3, [r7, #16]
  return(result);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	60fb      	str	r3, [r7, #12]
  return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01e      	beq.n	8006588 <osSemaphoreRelease+0x80>
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <osSemaphoreRelease+0xa8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d11a      	bne.n	8006588 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4619      	mov	r1, r3
 800655c:	69b8      	ldr	r0, [r7, #24]
 800655e:	f000 fc7d 	bl	8006e5c <xQueueGiveFromISR>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d003      	beq.n	8006570 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006568:	f06f 0302 	mvn.w	r3, #2
 800656c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800656e:	e018      	b.n	80065a2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d015      	beq.n	80065a2 <osSemaphoreRelease+0x9a>
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <osSemaphoreRelease+0xac>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006586:	e00c      	b.n	80065a2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006588:	2300      	movs	r3, #0
 800658a:	2200      	movs	r2, #0
 800658c:	2100      	movs	r1, #0
 800658e:	69b8      	ldr	r0, [r7, #24]
 8006590:	f000 fabe 	bl	8006b10 <xQueueGenericSend>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d004      	beq.n	80065a4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800659a:	f06f 0302 	mvn.w	r3, #2
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e000      	b.n	80065a4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065a2:	bf00      	nop
    }
  }

  return (stat);
 80065a4:	69fb      	ldr	r3, [r7, #28]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000a34 	.word	0x20000a34
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a07      	ldr	r2, [pc, #28]	; (80065e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80065c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4a06      	ldr	r2, [pc, #24]	; (80065e8 <vApplicationGetIdleTaskMemory+0x30>)
 80065ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	601a      	str	r2, [r3, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000a38 	.word	0x20000a38
 80065e8:	20000ae0 	.word	0x20000ae0

080065ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a07      	ldr	r2, [pc, #28]	; (8006618 <vApplicationGetTimerTaskMemory+0x2c>)
 80065fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4a06      	ldr	r2, [pc, #24]	; (800661c <vApplicationGetTimerTaskMemory+0x30>)
 8006602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800660a:	601a      	str	r2, [r3, #0]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20000ce0 	.word	0x20000ce0
 800661c:	20000d88 	.word	0x20000d88

08006620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f103 0208 	add.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 0208 	add.w	r2, r3, #8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f103 0208 	add.w	r2, r3, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d8:	d103      	bne.n	80066e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e00c      	b.n	80066fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3308      	adds	r3, #8
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e002      	b.n	80066f0 <vListInsert+0x2e>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d2f6      	bcs.n	80066ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6892      	ldr	r2, [r2, #8]
 800674a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6852      	ldr	r2, [r2, #4]
 8006754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d103      	bne.n	8006768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	1e5a      	subs	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10c      	bne.n	80067b6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	b672      	cpsid	i
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	b662      	cpsie	i
 80067b0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80067b6:	f002 fd69 	bl	800928c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	441a      	add	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	3b01      	subs	r3, #1
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	441a      	add	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	22ff      	movs	r2, #255	; 0xff
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	22ff      	movs	r2, #255	; 0xff
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d114      	bne.n	8006836 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3310      	adds	r3, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fd1d 	bl	8008258 <xTaskRemoveFromEventList>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <xQueueGenericReset+0xd0>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	e009      	b.n	800684a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3310      	adds	r3, #16
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fef0 	bl	8006620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3324      	adds	r3, #36	; 0x24
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff feeb 	bl	8006620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800684a:	f002 fd53 	bl	80092f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800684e:	2301      	movs	r3, #1
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08e      	sub	sp, #56	; 0x38
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10c      	bne.n	800688a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	b672      	cpsid	i
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	b662      	cpsie	i
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	b672      	cpsid	i
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	b662      	cpsie	i
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <xQueueGenericCreateStatic+0x5a>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <xQueueGenericCreateStatic+0x5e>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <xQueueGenericCreateStatic+0x60>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10c      	bne.n	80068da <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	b672      	cpsid	i
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	b662      	cpsie	i
 80068d4:	623b      	str	r3, [r7, #32]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <xQueueGenericCreateStatic+0x8a>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <xQueueGenericCreateStatic+0x8e>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <xQueueGenericCreateStatic+0x90>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10c      	bne.n	800690a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	b672      	cpsid	i
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	b662      	cpsie	i
 8006904:	61fb      	str	r3, [r7, #28]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800690a:	2350      	movs	r3, #80	; 0x50
 800690c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b50      	cmp	r3, #80	; 0x50
 8006912:	d00c      	beq.n	800692e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	b672      	cpsid	i
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	b662      	cpsie	i
 8006928:	61bb      	str	r3, [r7, #24]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800692e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00d      	beq.n	8006956 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006942:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f847 	bl	80069e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006958:	4618      	mov	r0, r3
 800695a:	3730      	adds	r7, #48	; 0x30
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10c      	bne.n	800698e <xQueueGenericCreate+0x2e>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	613b      	str	r3, [r7, #16]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e004      	b.n	80069a4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3350      	adds	r3, #80	; 0x50
 80069a8:	4618      	mov	r0, r3
 80069aa:	f002 fd9b 	bl	80094e4 <pvPortMalloc>
 80069ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	3350      	adds	r3, #80	; 0x50
 80069be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069c8:	79fa      	ldrb	r2, [r7, #7]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f805 	bl	80069e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069da:	69bb      	ldr	r3, [r7, #24]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a12:	2101      	movs	r1, #1
 8006a14:	69b8      	ldr	r0, [r7, #24]
 8006a16:	f7ff feb7 	bl	8006788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b08a      	sub	sp, #40	; 0x28
 8006a2e:	af02      	add	r7, sp, #8
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10c      	bne.n	8006a56 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	b672      	cpsid	i
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	b662      	cpsie	i
 8006a50:	61bb      	str	r3, [r7, #24]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d90c      	bls.n	8006a78 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	b672      	cpsid	i
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	b662      	cpsie	i
 8006a72:	617b      	str	r3, [r7, #20]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a78:	2302      	movs	r3, #2
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2100      	movs	r1, #0
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff feea 	bl	800685c <xQueueGenericCreateStatic>
 8006a88:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006a96:	69fb      	ldr	r3, [r7, #28]
	}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10c      	bne.n	8006aca <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	613b      	str	r3, [r7, #16]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d90c      	bls.n	8006aec <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	b672      	cpsid	i
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	b662      	cpsie	i
 8006ae6:	60fb      	str	r3, [r7, #12]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006aec:	2202      	movs	r2, #2
 8006aee:	2100      	movs	r1, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff35 	bl	8006960 <xQueueGenericCreate>
 8006af6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b04:	697b      	ldr	r3, [r7, #20]
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08e      	sub	sp, #56	; 0x38
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10c      	bne.n	8006b46 <xQueueGenericSend+0x36>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	b672      	cpsid	i
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	b662      	cpsie	i
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <xQueueGenericSend+0x44>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <xQueueGenericSend+0x48>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <xQueueGenericSend+0x4a>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10c      	bne.n	8006b78 <xQueueGenericSend+0x68>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	b672      	cpsid	i
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	b662      	cpsie	i
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d103      	bne.n	8006b86 <xQueueGenericSend+0x76>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <xQueueGenericSend+0x7a>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <xQueueGenericSend+0x7c>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10c      	bne.n	8006baa <xQueueGenericSend+0x9a>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	b672      	cpsid	i
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	b662      	cpsie	i
 8006ba4:	623b      	str	r3, [r7, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006baa:	f001 fd1f 	bl	80085ec <xTaskGetSchedulerState>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <xQueueGenericSend+0xaa>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <xQueueGenericSend+0xae>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueGenericSend+0xb0>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10c      	bne.n	8006bde <xQueueGenericSend+0xce>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	b672      	cpsid	i
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	b662      	cpsie	i
 8006bd8:	61fb      	str	r3, [r7, #28]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bde:	f002 fb55 	bl	800928c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <xQueueGenericSend+0xe4>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d129      	bne.n	8006c48 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fc82 	bl	8007502 <prvCopyDataToQueue>
 8006bfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fb23 	bl	8008258 <xTaskRemoveFromEventList>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c18:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <xQueueGenericSend+0x208>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e00a      	b.n	8006c40 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <xQueueGenericSend+0x208>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c40:	f002 fb58 	bl	80092f4 <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e063      	b.n	8006d10 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c4e:	f002 fb51 	bl	80092f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e05c      	b.n	8006d10 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fb5f 	bl	8008324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6a:	f002 fb43 	bl	80092f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c6e:	f001 f8bf 	bl	8007df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c72:	f002 fb0b 	bl	800928c <vPortEnterCritical>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x17c>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x192>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca2:	f002 fb27 	bl	80092f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca6:	1d3a      	adds	r2, r7, #4
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fb4e 	bl	8008350 <xTaskCheckForTimeOut>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d124      	bne.n	8006d04 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbc:	f000 fd19 	bl	80076f2 <prvIsQueueFull>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	3310      	adds	r3, #16
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 fa6e 	bl	80081b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd6:	f000 fca4 	bl	8007622 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cda:	f001 f897 	bl	8007e0c <xTaskResumeAll>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af7c 	bne.w	8006bde <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <xQueueGenericSend+0x208>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	e772      	b.n	8006bde <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cfa:	f000 fc92 	bl	8007622 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfe:	f001 f885 	bl	8007e0c <xTaskResumeAll>
 8006d02:	e76c      	b.n	8006bde <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d06:	f000 fc8c 	bl	8007622 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0a:	f001 f87f 	bl	8007e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	b672      	cpsid	i
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	b662      	cpsie	i
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <xQueueGenericSendFromISR+0x40>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <xQueueGenericSendFromISR+0x44>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <xQueueGenericSendFromISR+0x46>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	623b      	str	r3, [r7, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSendFromISR+0x72>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <xQueueGenericSendFromISR+0x76>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericSendFromISR+0x78>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10c      	bne.n	8006db2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	b672      	cpsid	i
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	b662      	cpsie	i
 8006dac:	61fb      	str	r3, [r7, #28]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006db2:	f002 fb53 	bl	800945c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006db6:	f3ef 8211 	mrs	r2, BASEPRI
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	b672      	cpsid	i
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	b662      	cpsie	i
 8006dce:	61ba      	str	r2, [r7, #24]
 8006dd0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <xQueueGenericSendFromISR+0xcc>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d12c      	bne.n	8006e42 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df8:	f000 fb83 	bl	8007502 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dfc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e04:	d112      	bne.n	8006e2c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fa20 	bl	8008258 <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00e      	beq.n	8006e3c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e007      	b.n	8006e3c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e30:	3301      	adds	r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	b25a      	sxtb	r2, r3
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e40:	e001      	b.n	8006e46 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3738      	adds	r7, #56	; 0x38
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08e      	sub	sp, #56	; 0x38
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10c      	bne.n	8006e8a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	b672      	cpsid	i
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	b662      	cpsie	i
 8006e84:	623b      	str	r3, [r7, #32]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00c      	beq.n	8006eac <xQueueGiveFromISR+0x50>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	b672      	cpsid	i
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	b662      	cpsie	i
 8006ea6:	61fb      	str	r3, [r7, #28]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <xQueueGiveFromISR+0x60>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <xQueueGiveFromISR+0x64>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <xQueueGiveFromISR+0x66>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	b672      	cpsid	i
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	b662      	cpsie	i
 8006eda:	61bb      	str	r3, [r7, #24]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ee0:	f002 fabc 	bl	800945c <vPortValidateInterruptPriority>
	__asm volatile
 8006ee4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	617a      	str	r2, [r7, #20]
 8006efe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f00:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d22b      	bcs.n	8006f6c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f2e:	d112      	bne.n	8006f56 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d016      	beq.n	8006f66 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	3324      	adds	r3, #36	; 0x24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 f98b 	bl	8008258 <xTaskRemoveFromEventList>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e007      	b.n	8006f66 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	b25a      	sxtb	r2, r3
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f66:	2301      	movs	r3, #1
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6a:	e001      	b.n	8006f70 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f383 8811 	msr	BASEPRI, r3
}
 8006f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3738      	adds	r7, #56	; 0x38
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08c      	sub	sp, #48	; 0x30
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10c      	bne.n	8006fbc <xQueueReceive+0x34>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	b672      	cpsid	i
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	b662      	cpsie	i
 8006fb6:	623b      	str	r3, [r7, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d103      	bne.n	8006fca <xQueueReceive+0x42>
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <xQueueReceive+0x46>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <xQueueReceive+0x48>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10c      	bne.n	8006fee <xQueueReceive+0x66>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	b672      	cpsid	i
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	b662      	cpsie	i
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fee:	f001 fafd 	bl	80085ec <xTaskGetSchedulerState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <xQueueReceive+0x76>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <xQueueReceive+0x7a>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <xQueueReceive+0x7c>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10c      	bne.n	8007022 <xQueueReceive+0x9a>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	b672      	cpsid	i
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	b662      	cpsie	i
 800701c:	61bb      	str	r3, [r7, #24]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007022:	f002 f933 	bl	800928c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01f      	beq.n	8007072 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007036:	f000 face 	bl	80075d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	1e5a      	subs	r2, r3, #1
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00f      	beq.n	800706a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	3310      	adds	r3, #16
 800704e:	4618      	mov	r0, r3
 8007050:	f001 f902 	bl	8008258 <xTaskRemoveFromEventList>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800705a:	4b3d      	ldr	r3, [pc, #244]	; (8007150 <xQueueReceive+0x1c8>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800706a:	f002 f943 	bl	80092f4 <vPortExitCritical>
				return pdPASS;
 800706e:	2301      	movs	r3, #1
 8007070:	e069      	b.n	8007146 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007078:	f002 f93c 	bl	80092f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800707c:	2300      	movs	r3, #0
 800707e:	e062      	b.n	8007146 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007086:	f107 0310 	add.w	r3, r7, #16
 800708a:	4618      	mov	r0, r3
 800708c:	f001 f94a 	bl	8008324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007094:	f002 f92e 	bl	80092f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007098:	f000 feaa 	bl	8007df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800709c:	f002 f8f6 	bl	800928c <vPortEnterCritical>
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ac:	d103      	bne.n	80070b6 <xQueueReceive+0x12e>
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c2:	d103      	bne.n	80070cc <xQueueReceive+0x144>
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070cc:	f002 f912 	bl	80092f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070d0:	1d3a      	adds	r2, r7, #4
 80070d2:	f107 0310 	add.w	r3, r7, #16
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 f939 	bl	8008350 <xTaskCheckForTimeOut>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d123      	bne.n	800712c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e6:	f000 faee 	bl	80076c6 <prvIsQueueEmpty>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d017      	beq.n	8007120 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	3324      	adds	r3, #36	; 0x24
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f859 	bl	80081b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007100:	f000 fa8f 	bl	8007622 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007104:	f000 fe82 	bl	8007e0c <xTaskResumeAll>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d189      	bne.n	8007022 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <xQueueReceive+0x1c8>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	e780      	b.n	8007022 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007122:	f000 fa7e 	bl	8007622 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007126:	f000 fe71 	bl	8007e0c <xTaskResumeAll>
 800712a:	e77a      	b.n	8007022 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800712c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800712e:	f000 fa78 	bl	8007622 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007132:	f000 fe6b 	bl	8007e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007138:	f000 fac5 	bl	80076c6 <prvIsQueueEmpty>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	f43f af6f 	beq.w	8007022 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007144:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007146:	4618      	mov	r0, r3
 8007148:	3730      	adds	r7, #48	; 0x30
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10c      	bne.n	800718a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	b672      	cpsid	i
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	b662      	cpsie	i
 8007184:	623b      	str	r3, [r7, #32]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	b672      	cpsid	i
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	b662      	cpsie	i
 80071a6:	61fb      	str	r3, [r7, #28]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ac:	f001 fa1e 	bl	80085ec <xTaskGetSchedulerState>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <xQueueSemaphoreTake+0x68>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <xQueueSemaphoreTake+0x6c>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <xQueueSemaphoreTake+0x6e>
 80071c0:	2300      	movs	r3, #0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	b672      	cpsid	i
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	b662      	cpsie	i
 80071da:	61bb      	str	r3, [r7, #24]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071e0:	f002 f854 	bl	800928c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d024      	beq.n	800723a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	1e5a      	subs	r2, r3, #1
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007200:	f001 fb72 	bl	80088e8 <pvTaskIncrementMutexHeldCount>
 8007204:	4602      	mov	r2, r0
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00f      	beq.n	8007232 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	3310      	adds	r3, #16
 8007216:	4618      	mov	r0, r3
 8007218:	f001 f81e 	bl	8008258 <xTaskRemoveFromEventList>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007222:	4b55      	ldr	r3, [pc, #340]	; (8007378 <xQueueSemaphoreTake+0x224>)
 8007224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007232:	f002 f85f 	bl	80092f4 <vPortExitCritical>
				return pdPASS;
 8007236:	2301      	movs	r3, #1
 8007238:	e099      	b.n	800736e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d113      	bne.n	8007268 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	b672      	cpsid	i
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	b662      	cpsie	i
 800725a:	617b      	str	r3, [r7, #20]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007260:	f002 f848 	bl	80092f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007264:	2300      	movs	r3, #0
 8007266:	e082      	b.n	800736e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800726e:	f107 030c 	add.w	r3, r7, #12
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f856 	bl	8008324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800727c:	f002 f83a 	bl	80092f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007280:	f000 fdb6 	bl	8007df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007284:	f002 f802 	bl	800928c <vPortEnterCritical>
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800728e:	b25b      	sxtb	r3, r3
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007294:	d103      	bne.n	800729e <xQueueSemaphoreTake+0x14a>
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a4:	b25b      	sxtb	r3, r3
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072aa:	d103      	bne.n	80072b4 <xQueueSemaphoreTake+0x160>
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072b4:	f002 f81e 	bl	80092f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072b8:	463a      	mov	r2, r7
 80072ba:	f107 030c 	add.w	r3, r7, #12
 80072be:	4611      	mov	r1, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 f845 	bl	8008350 <xTaskCheckForTimeOut>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d132      	bne.n	8007332 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ce:	f000 f9fa 	bl	80076c6 <prvIsQueueEmpty>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d026      	beq.n	8007326 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80072e0:	f001 ffd4 	bl	800928c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f99d 	bl	8008628 <xTaskPriorityInherit>
 80072ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80072f0:	f002 f800 	bl	80092f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	3324      	adds	r3, #36	; 0x24
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 ff57 	bl	80081b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007304:	f000 f98d 	bl	8007622 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007308:	f000 fd80 	bl	8007e0c <xTaskResumeAll>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	f47f af66 	bne.w	80071e0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007314:	4b18      	ldr	r3, [pc, #96]	; (8007378 <xQueueSemaphoreTake+0x224>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	e75c      	b.n	80071e0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007328:	f000 f97b 	bl	8007622 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800732c:	f000 fd6e 	bl	8007e0c <xTaskResumeAll>
 8007330:	e756      	b.n	80071e0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007334:	f000 f975 	bl	8007622 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007338:	f000 fd68 	bl	8007e0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800733c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800733e:	f000 f9c2 	bl	80076c6 <prvIsQueueEmpty>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	f43f af4b 	beq.w	80071e0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00d      	beq.n	800736c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007350:	f001 ff9c 	bl	800928c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007356:	f000 f8bc 	bl	80074d2 <prvGetDisinheritPriorityAfterTimeout>
 800735a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f001 fa3a 	bl	80087dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007368:	f001 ffc4 	bl	80092f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800736c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800736e:	4618      	mov	r0, r3
 8007370:	3738      	adds	r7, #56	; 0x38
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08e      	sub	sp, #56	; 0x38
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	b672      	cpsid	i
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	b662      	cpsie	i
 80073a6:	623b      	str	r3, [r7, #32]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <xQueueReceiveFromISR+0x3e>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <xQueueReceiveFromISR+0x42>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <xQueueReceiveFromISR+0x44>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10c      	bne.n	80073de <xQueueReceiveFromISR+0x62>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
 80073d8:	61fb      	str	r3, [r7, #28]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073de:	f002 f83d 	bl	800945c <vPortValidateInterruptPriority>
	__asm volatile
 80073e2:	f3ef 8211 	mrs	r2, BASEPRI
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	b672      	cpsid	i
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	b662      	cpsie	i
 80073fa:	61ba      	str	r2, [r7, #24]
 80073fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80073fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d02f      	beq.n	800746e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741c:	f000 f8db 	bl	80075d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007430:	d112      	bne.n	8007458 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	3310      	adds	r3, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f000 ff0a 	bl	8008258 <xTaskRemoveFromEventList>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e007      	b.n	8007468 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745c:	3301      	adds	r3, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	b25a      	sxtb	r2, r3
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007468:	2301      	movs	r3, #1
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
 800746c:	e001      	b.n	8007472 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f383 8811 	msr	BASEPRI, r3
}
 800747c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007480:	4618      	mov	r0, r3
 8007482:	3738      	adds	r7, #56	; 0x38
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10c      	bne.n	80074b4 <vQueueDelete+0x2c>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	b672      	cpsid	i
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	b662      	cpsie	i
 80074ae:	60bb      	str	r3, [r7, #8]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f95f 	bl	8007778 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f002 f8d7 	bl	8009678 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80074ca:	bf00      	nop
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	e001      	b.n	80074f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074f4:	68fb      	ldr	r3, [r7, #12]
	}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10d      	bne.n	800753c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d14d      	bne.n	80075c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	4618      	mov	r0, r3
 800752e:	f001 f8e3 	bl	80086f8 <xTaskPriorityDisinherit>
 8007532:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
 800753a:	e043      	b.n	80075c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d119      	bne.n	8007576 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6858      	ldr	r0, [r3, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	461a      	mov	r2, r3
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	f002 fa31 	bl	80099b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	441a      	add	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	429a      	cmp	r2, r3
 800756a:	d32b      	bcc.n	80075c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]
 8007574:	e026      	b.n	80075c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68d8      	ldr	r0, [r3, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	461a      	mov	r2, r3
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	f002 fa17 	bl	80099b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	425b      	negs	r3, r3
 8007590:	441a      	add	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d207      	bcs.n	80075b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	425b      	negs	r3, r3
 80075ac:	441a      	add	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d105      	bne.n	80075c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075cc:	697b      	ldr	r3, [r7, #20]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d018      	beq.n	800761a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	441a      	add	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d303      	bcc.n	800760a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68d9      	ldr	r1, [r3, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	461a      	mov	r2, r3
 8007614:	6838      	ldr	r0, [r7, #0]
 8007616:	f002 f9cd 	bl	80099b4 <memcpy>
	}
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800762a:	f001 fe2f 	bl	800928c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007634:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007636:	e011      	b.n	800765c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3324      	adds	r3, #36	; 0x24
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fe07 	bl	8008258 <xTaskRemoveFromEventList>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007650:	f000 fee4 	bl	800841c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	3b01      	subs	r3, #1
 8007658:	b2db      	uxtb	r3, r3
 800765a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800765c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dce9      	bgt.n	8007638 <prvUnlockQueue+0x16>
 8007664:	e000      	b.n	8007668 <prvUnlockQueue+0x46>
					break;
 8007666:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	22ff      	movs	r2, #255	; 0xff
 800766c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007670:	f001 fe40 	bl	80092f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007674:	f001 fe0a 	bl	800928c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800767e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007680:	e011      	b.n	80076a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d012      	beq.n	80076b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3310      	adds	r3, #16
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fde2 	bl	8008258 <xTaskRemoveFromEventList>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800769a:	f000 febf 	bl	800841c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dce9      	bgt.n	8007682 <prvUnlockQueue+0x60>
 80076ae:	e000      	b.n	80076b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	22ff      	movs	r2, #255	; 0xff
 80076b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076ba:	f001 fe1b 	bl	80092f4 <vPortExitCritical>
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076ce:	f001 fddd 	bl	800928c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d102      	bne.n	80076e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076da:	2301      	movs	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e001      	b.n	80076e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076e4:	f001 fe06 	bl	80092f4 <vPortExitCritical>

	return xReturn;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076fa:	f001 fdc7 	bl	800928c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	429a      	cmp	r2, r3
 8007708:	d102      	bne.n	8007710 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	e001      	b.n	8007714 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007714:	f001 fdee 	bl	80092f4 <vPortExitCritical>

	return xReturn;
 8007718:	68fb      	ldr	r3, [r7, #12]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e014      	b.n	800775e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007734:	4a0f      	ldr	r2, [pc, #60]	; (8007774 <vQueueAddToRegistry+0x50>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007740:	490c      	ldr	r1, [pc, #48]	; (8007774 <vQueueAddToRegistry+0x50>)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800774a:	4a0a      	ldr	r2, [pc, #40]	; (8007774 <vQueueAddToRegistry+0x50>)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4413      	add	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007756:	e006      	b.n	8007766 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b07      	cmp	r3, #7
 8007762:	d9e7      	bls.n	8007734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20001188 	.word	0x20001188

08007778 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e016      	b.n	80077b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <vQueueUnregisterQueue+0x50>)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d10b      	bne.n	80077ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007796:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <vQueueUnregisterQueue+0x50>)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2100      	movs	r1, #0
 800779c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80077a0:	4a09      	ldr	r2, [pc, #36]	; (80077c8 <vQueueUnregisterQueue+0x50>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4413      	add	r3, r2
 80077a8:	2200      	movs	r2, #0
 80077aa:	605a      	str	r2, [r3, #4]
				break;
 80077ac:	e006      	b.n	80077bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b07      	cmp	r3, #7
 80077b8:	d9e5      	bls.n	8007786 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	20001188 	.word	0x20001188

080077cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077dc:	f001 fd56 	bl	800928c <vPortEnterCritical>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d103      	bne.n	80077f6 <vQueueWaitForMessageRestricted+0x2a>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007802:	d103      	bne.n	800780c <vQueueWaitForMessageRestricted+0x40>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800780c:	f001 fd72 	bl	80092f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3324      	adds	r3, #36	; 0x24
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fceb 	bl	80081fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff fefb 	bl	8007622 <prvUnlockQueue>
	}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08e      	sub	sp, #56	; 0x38
 8007838:	af04      	add	r7, sp, #16
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10c      	bne.n	8007862 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	b672      	cpsid	i
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	b662      	cpsie	i
 800785c:	623b      	str	r3, [r7, #32]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10c      	bne.n	8007882 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	b672      	cpsid	i
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	b662      	cpsie	i
 800787c:	61fb      	str	r3, [r7, #28]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007882:	23a8      	movs	r3, #168	; 0xa8
 8007884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2ba8      	cmp	r3, #168	; 0xa8
 800788a:	d00c      	beq.n	80078a6 <xTaskCreateStatic+0x72>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	b672      	cpsid	i
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	b662      	cpsie	i
 80078a0:	61bb      	str	r3, [r7, #24]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01e      	beq.n	80078ec <xTaskCreateStatic+0xb8>
 80078ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01b      	beq.n	80078ec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078c6:	2300      	movs	r3, #0
 80078c8:	9303      	str	r3, [sp, #12]
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	f107 0314 	add.w	r3, r7, #20
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f850 	bl	8007984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078e6:	f000 f8f5 	bl	8007ad4 <prvAddNewTaskToReadyList>
 80078ea:	e001      	b.n	80078f0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078f0:	697b      	ldr	r3, [r7, #20]
	}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3728      	adds	r7, #40	; 0x28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b08c      	sub	sp, #48	; 0x30
 80078fe:	af04      	add	r7, sp, #16
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4618      	mov	r0, r3
 8007910:	f001 fde8 	bl	80094e4 <pvPortMalloc>
 8007914:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800791c:	20a8      	movs	r0, #168	; 0xa8
 800791e:	f001 fde1 	bl	80094e4 <pvPortMalloc>
 8007922:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
 8007930:	e005      	b.n	800793e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007932:	6978      	ldr	r0, [r7, #20]
 8007934:	f001 fea0 	bl	8009678 <vPortFree>
 8007938:	e001      	b.n	800793e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800794c:	88fa      	ldrh	r2, [r7, #6]
 800794e:	2300      	movs	r3, #0
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	9302      	str	r3, [sp, #8]
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f80e 	bl	8007984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007968:	69f8      	ldr	r0, [r7, #28]
 800796a:	f000 f8b3 	bl	8007ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800796e:	2301      	movs	r3, #1
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e002      	b.n	800797a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007978:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800797a:	69bb      	ldr	r3, [r7, #24]
	}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	461a      	mov	r2, r3
 800799c:	21a5      	movs	r1, #165	; 0xa5
 800799e:	f001 ff85 	bl	80098ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80079ac:	440b      	add	r3, r1
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00c      	beq.n	80079e0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	b672      	cpsid	i
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	b662      	cpsie	i
 80079da:	617b      	str	r3, [r7, #20]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01f      	beq.n	8007a26 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
 80079ea:	e012      	b.n	8007a12 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	7819      	ldrb	r1, [r3, #0]
 80079f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	4413      	add	r3, r2
 80079fa:	3334      	adds	r3, #52	; 0x34
 80079fc:	460a      	mov	r2, r1
 80079fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d006      	beq.n	8007a1a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b0f      	cmp	r3, #15
 8007a16:	d9e9      	bls.n	80079ec <prvInitialiseNewTask+0x68>
 8007a18:	e000      	b.n	8007a1c <prvInitialiseNewTask+0x98>
			{
				break;
 8007a1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a24:	e003      	b.n	8007a2e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	2b37      	cmp	r3, #55	; 0x37
 8007a32:	d901      	bls.n	8007a38 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a34:	2337      	movs	r3, #55	; 0x37
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2200      	movs	r2, #0
 8007a48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fe06 	bl	8006660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	3318      	adds	r3, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fe01 	bl	8006660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	3354      	adds	r3, #84	; 0x54
 8007a88:	224c      	movs	r2, #76	; 0x4c
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 ff0d 	bl	80098ac <memset>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	4a0c      	ldr	r2, [pc, #48]	; (8007ac8 <prvInitialiseNewTask+0x144>)
 8007a96:	659a      	str	r2, [r3, #88]	; 0x58
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <prvInitialiseNewTask+0x148>)
 8007a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	4a0b      	ldr	r2, [pc, #44]	; (8007ad0 <prvInitialiseNewTask+0x14c>)
 8007aa2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	69b8      	ldr	r0, [r7, #24]
 8007aaa:	f001 fae1 	bl	8009070 <pxPortInitialiseStack>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007abe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20005414 	.word	0x20005414
 8007acc:	2000547c 	.word	0x2000547c
 8007ad0:	200054e4 	.word	0x200054e4

08007ad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007adc:	f001 fbd6 	bl	800928c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <prvAddNewTaskToReadyList+0xc4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <prvAddNewTaskToReadyList+0xc4>)
 8007ae8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aea:	4b2c      	ldr	r3, [pc, #176]	; (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007af2:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007af8:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <prvAddNewTaskToReadyList+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d110      	bne.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b00:	f000 fcb0 	bl	8008464 <prvInitialiseTaskLists>
 8007b04:	e00d      	b.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b06:	4b26      	ldr	r3, [pc, #152]	; (8007ba0 <prvAddNewTaskToReadyList+0xcc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b0e:	4b23      	ldr	r3, [pc, #140]	; (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d802      	bhi.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b1c:	4a1f      	ldr	r2, [pc, #124]	; (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b22:	4b20      	ldr	r3, [pc, #128]	; (8007ba4 <prvAddNewTaskToReadyList+0xd0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	4a1e      	ldr	r2, [pc, #120]	; (8007ba4 <prvAddNewTaskToReadyList+0xd0>)
 8007b2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ba4 <prvAddNewTaskToReadyList+0xd0>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <prvAddNewTaskToReadyList+0xd4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d903      	bls.n	8007b48 <prvAddNewTaskToReadyList+0x74>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <prvAddNewTaskToReadyList+0xd4>)
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4a15      	ldr	r2, [pc, #84]	; (8007bac <prvAddNewTaskToReadyList+0xd8>)
 8007b56:	441a      	add	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f7fe fd8b 	bl	800667a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b64:	f001 fbc6 	bl	80092f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b68:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <prvAddNewTaskToReadyList+0xcc>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d207      	bcs.n	8007b8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <prvAddNewTaskToReadyList+0xdc>)
 8007b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000169c 	.word	0x2000169c
 8007b9c:	200011c8 	.word	0x200011c8
 8007ba0:	200016a8 	.word	0x200016a8
 8007ba4:	200016b8 	.word	0x200016b8
 8007ba8:	200016a4 	.word	0x200016a4
 8007bac:	200011cc 	.word	0x200011cc
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007bbc:	f001 fb66 	bl	800928c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <vTaskDelete+0x18>
 8007bc6:	4b2d      	ldr	r3, [pc, #180]	; (8007c7c <vTaskDelete+0xc8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	e000      	b.n	8007bce <vTaskDelete+0x1a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fdad 	bl	8006734 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fda4 	bl	8006734 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007bec:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <vTaskDelete+0xcc>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	4a23      	ldr	r2, [pc, #140]	; (8007c80 <vTaskDelete+0xcc>)
 8007bf4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <vTaskDelete+0xc8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d10b      	bne.n	8007c18 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4619      	mov	r1, r3
 8007c06:	481f      	ldr	r0, [pc, #124]	; (8007c84 <vTaskDelete+0xd0>)
 8007c08:	f7fe fd37 	bl	800667a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007c0c:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <vTaskDelete+0xd4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3301      	adds	r3, #1
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <vTaskDelete+0xd4>)
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	e009      	b.n	8007c2c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007c18:	4b1c      	ldr	r3, [pc, #112]	; (8007c8c <vTaskDelete+0xd8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	4a1b      	ldr	r2, [pc, #108]	; (8007c8c <vTaskDelete+0xd8>)
 8007c20:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fc8c 	bl	8008540 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007c28:	f000 fcc0 	bl	80085ac <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007c2c:	f001 fb62 	bl	80092f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <vTaskDelete+0xdc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01d      	beq.n	8007c74 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8007c38:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <vTaskDelete+0xc8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d118      	bne.n	8007c74 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007c42:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <vTaskDelete+0xe0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00c      	beq.n	8007c64 <vTaskDelete+0xb0>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	b672      	cpsid	i
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	b662      	cpsie	i
 8007c5e:	60bb      	str	r3, [r7, #8]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8007c64:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <vTaskDelete+0xe4>)
 8007c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	200011c8 	.word	0x200011c8
 8007c80:	200016b8 	.word	0x200016b8
 8007c84:	20001670 	.word	0x20001670
 8007c88:	20001684 	.word	0x20001684
 8007c8c:	2000169c 	.word	0x2000169c
 8007c90:	200016a8 	.word	0x200016a8
 8007c94:	200016c4 	.word	0x200016c4
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d019      	beq.n	8007ce2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cae:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <vTaskDelay+0x64>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00c      	beq.n	8007cd0 <vTaskDelay+0x34>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	b672      	cpsid	i
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	b662      	cpsie	i
 8007cca:	60bb      	str	r3, [r7, #8]
}
 8007ccc:	bf00      	nop
 8007cce:	e7fe      	b.n	8007cce <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007cd0:	f000 f88e 	bl	8007df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fe1a 	bl	8008910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cdc:	f000 f896 	bl	8007e0c <xTaskResumeAll>
 8007ce0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d107      	bne.n	8007cf8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007ce8:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <vTaskDelay+0x68>)
 8007cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	200016c4 	.word	0x200016c4
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	; 0x28
 8007d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d16:	463a      	mov	r2, r7
 8007d18:	1d39      	adds	r1, r7, #4
 8007d1a:	f107 0308 	add.w	r3, r7, #8
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fc4a 	bl	80065b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	9202      	str	r2, [sp, #8]
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	2300      	movs	r3, #0
 8007d34:	460a      	mov	r2, r1
 8007d36:	4926      	ldr	r1, [pc, #152]	; (8007dd0 <vTaskStartScheduler+0xc8>)
 8007d38:	4826      	ldr	r0, [pc, #152]	; (8007dd4 <vTaskStartScheduler+0xcc>)
 8007d3a:	f7ff fd7b 	bl	8007834 <xTaskCreateStatic>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4a25      	ldr	r2, [pc, #148]	; (8007dd8 <vTaskStartScheduler+0xd0>)
 8007d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <vTaskStartScheduler+0xd0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e001      	b.n	8007d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d102      	bne.n	8007d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d5c:	f000 fe2c 	bl	80089b8 <xTimerCreateTimerTask>
 8007d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d11d      	bne.n	8007da4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	b672      	cpsid	i
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	b662      	cpsie	i
 8007d7c:	613b      	str	r3, [r7, #16]
}
 8007d7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <vTaskStartScheduler+0xd4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3354      	adds	r3, #84	; 0x54
 8007d86:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <vTaskStartScheduler+0xd8>)
 8007d88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d8a:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <vTaskStartScheduler+0xdc>)
 8007d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <vTaskStartScheduler+0xe0>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d98:	4b14      	ldr	r3, [pc, #80]	; (8007dec <vTaskStartScheduler+0xe4>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d9e:	f001 f9f7 	bl	8009190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007da2:	e010      	b.n	8007dc6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007daa:	d10c      	bne.n	8007dc6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	b672      	cpsid	i
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	b662      	cpsie	i
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <vTaskStartScheduler+0xbc>
}
 8007dc6:	bf00      	nop
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08009abc 	.word	0x08009abc
 8007dd4:	08008435 	.word	0x08008435
 8007dd8:	200016c0 	.word	0x200016c0
 8007ddc:	200011c8 	.word	0x200011c8
 8007de0:	2000006c 	.word	0x2000006c
 8007de4:	200016bc 	.word	0x200016bc
 8007de8:	200016a8 	.word	0x200016a8
 8007dec:	200016a0 	.word	0x200016a0

08007df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007df4:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <vTaskSuspendAll+0x18>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	4a03      	ldr	r2, [pc, #12]	; (8007e08 <vTaskSuspendAll+0x18>)
 8007dfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007dfe:	bf00      	nop
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	200016c4 	.word	0x200016c4

08007e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e1a:	4b43      	ldr	r3, [pc, #268]	; (8007f28 <xTaskResumeAll+0x11c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <xTaskResumeAll+0x30>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	b672      	cpsid	i
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	b662      	cpsie	i
 8007e36:	603b      	str	r3, [r7, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e3c:	f001 fa26 	bl	800928c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e40:	4b39      	ldr	r3, [pc, #228]	; (8007f28 <xTaskResumeAll+0x11c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	4a38      	ldr	r2, [pc, #224]	; (8007f28 <xTaskResumeAll+0x11c>)
 8007e48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4a:	4b37      	ldr	r3, [pc, #220]	; (8007f28 <xTaskResumeAll+0x11c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d162      	bne.n	8007f18 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e52:	4b36      	ldr	r3, [pc, #216]	; (8007f2c <xTaskResumeAll+0x120>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d05e      	beq.n	8007f18 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e5a:	e02f      	b.n	8007ebc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5c:	4b34      	ldr	r3, [pc, #208]	; (8007f30 <xTaskResumeAll+0x124>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3318      	adds	r3, #24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fc63 	bl	8006734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fc5e 	bl	8006734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <xTaskResumeAll+0x128>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d903      	bls.n	8007e8c <xTaskResumeAll+0x80>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <xTaskResumeAll+0x128>)
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4a27      	ldr	r2, [pc, #156]	; (8007f38 <xTaskResumeAll+0x12c>)
 8007e9a:	441a      	add	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe fbe9 	bl	800667a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eac:	4b23      	ldr	r3, [pc, #140]	; (8007f3c <xTaskResumeAll+0x130>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d302      	bcc.n	8007ebc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <xTaskResumeAll+0x134>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ebc:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <xTaskResumeAll+0x124>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1cb      	bne.n	8007e5c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007eca:	f000 fb6f 	bl	80085ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ece:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <xTaskResumeAll+0x138>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d010      	beq.n	8007efc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007eda:	f000 f847 	bl	8007f6c <xTaskIncrementTick>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007ee4:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <xTaskResumeAll+0x134>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f1      	bne.n	8007eda <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007ef6:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <xTaskResumeAll+0x138>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007efc:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <xTaskResumeAll+0x134>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f08:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <xTaskResumeAll+0x13c>)
 8007f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f18:	f001 f9ec 	bl	80092f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	200016c4 	.word	0x200016c4
 8007f2c:	2000169c 	.word	0x2000169c
 8007f30:	2000165c 	.word	0x2000165c
 8007f34:	200016a4 	.word	0x200016a4
 8007f38:	200011cc 	.word	0x200011cc
 8007f3c:	200011c8 	.word	0x200011c8
 8007f40:	200016b0 	.word	0x200016b0
 8007f44:	200016ac 	.word	0x200016ac
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <xTaskGetTickCount+0x1c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f58:	687b      	ldr	r3, [r7, #4]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	200016a0 	.word	0x200016a0

08007f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f76:	4b50      	ldr	r3, [pc, #320]	; (80080b8 <xTaskIncrementTick+0x14c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 808b 	bne.w	8008096 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f80:	4b4e      	ldr	r3, [pc, #312]	; (80080bc <xTaskIncrementTick+0x150>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f88:	4a4c      	ldr	r2, [pc, #304]	; (80080bc <xTaskIncrementTick+0x150>)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d122      	bne.n	8007fda <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f94:	4b4a      	ldr	r3, [pc, #296]	; (80080c0 <xTaskIncrementTick+0x154>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	b672      	cpsid	i
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	b662      	cpsie	i
 8007fb2:	603b      	str	r3, [r7, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	e7fe      	b.n	8007fb6 <xTaskIncrementTick+0x4a>
 8007fb8:	4b41      	ldr	r3, [pc, #260]	; (80080c0 <xTaskIncrementTick+0x154>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	4b41      	ldr	r3, [pc, #260]	; (80080c4 <xTaskIncrementTick+0x158>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a3f      	ldr	r2, [pc, #252]	; (80080c0 <xTaskIncrementTick+0x154>)
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4a3f      	ldr	r2, [pc, #252]	; (80080c4 <xTaskIncrementTick+0x158>)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	4b3e      	ldr	r3, [pc, #248]	; (80080c8 <xTaskIncrementTick+0x15c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	4a3d      	ldr	r2, [pc, #244]	; (80080c8 <xTaskIncrementTick+0x15c>)
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	f000 fae9 	bl	80085ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fda:	4b3c      	ldr	r3, [pc, #240]	; (80080cc <xTaskIncrementTick+0x160>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d349      	bcc.n	8008078 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe4:	4b36      	ldr	r3, [pc, #216]	; (80080c0 <xTaskIncrementTick+0x154>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fee:	4b37      	ldr	r3, [pc, #220]	; (80080cc <xTaskIncrementTick+0x160>)
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ff4:	601a      	str	r2, [r3, #0]
					break;
 8007ff6:	e03f      	b.n	8008078 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff8:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <xTaskIncrementTick+0x154>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d203      	bcs.n	8008018 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008010:	4a2e      	ldr	r2, [pc, #184]	; (80080cc <xTaskIncrementTick+0x160>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008016:	e02f      	b.n	8008078 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3304      	adds	r3, #4
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe fb89 	bl	8006734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	3318      	adds	r3, #24
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fb80 	bl	8006734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	4b25      	ldr	r3, [pc, #148]	; (80080d0 <xTaskIncrementTick+0x164>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d903      	bls.n	8008048 <xTaskIncrementTick+0xdc>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	4a22      	ldr	r2, [pc, #136]	; (80080d0 <xTaskIncrementTick+0x164>)
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <xTaskIncrementTick+0x168>)
 8008056:	441a      	add	r2, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe fb0b 	bl	800667a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <xTaskIncrementTick+0x16c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	429a      	cmp	r2, r3
 8008070:	d3b8      	bcc.n	8007fe4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008072:	2301      	movs	r3, #1
 8008074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008076:	e7b5      	b.n	8007fe4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008078:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <xTaskIncrementTick+0x16c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807e:	4915      	ldr	r1, [pc, #84]	; (80080d4 <xTaskIncrementTick+0x168>)
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d907      	bls.n	80080a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008090:	2301      	movs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	e004      	b.n	80080a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <xTaskIncrementTick+0x170>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	4a0f      	ldr	r2, [pc, #60]	; (80080dc <xTaskIncrementTick+0x170>)
 800809e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080a0:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <xTaskIncrementTick+0x174>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080ac:	697b      	ldr	r3, [r7, #20]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200016c4 	.word	0x200016c4
 80080bc:	200016a0 	.word	0x200016a0
 80080c0:	20001654 	.word	0x20001654
 80080c4:	20001658 	.word	0x20001658
 80080c8:	200016b4 	.word	0x200016b4
 80080cc:	200016bc 	.word	0x200016bc
 80080d0:	200016a4 	.word	0x200016a4
 80080d4:	200011cc 	.word	0x200011cc
 80080d8:	200011c8 	.word	0x200011c8
 80080dc:	200016ac 	.word	0x200016ac
 80080e0:	200016b0 	.word	0x200016b0

080080e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080ea:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <vTaskSwitchContext+0xb4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <vTaskSwitchContext+0xb8>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080f8:	e048      	b.n	800818c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80080fa:	4b28      	ldr	r3, [pc, #160]	; (800819c <vTaskSwitchContext+0xb8>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008100:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <vTaskSwitchContext+0xbc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e012      	b.n	800812e <vTaskSwitchContext+0x4a>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10c      	bne.n	8008128 <vTaskSwitchContext+0x44>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	b672      	cpsid	i
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	b662      	cpsie	i
 8008122:	607b      	str	r3, [r7, #4]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vTaskSwitchContext+0x42>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3b01      	subs	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	491d      	ldr	r1, [pc, #116]	; (80081a4 <vTaskSwitchContext+0xc0>)
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0e2      	beq.n	8008108 <vTaskSwitchContext+0x24>
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <vTaskSwitchContext+0xc0>)
 800814e:	4413      	add	r3, r2
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	3308      	adds	r3, #8
 8008164:	429a      	cmp	r2, r3
 8008166:	d104      	bne.n	8008172 <vTaskSwitchContext+0x8e>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4a0b      	ldr	r2, [pc, #44]	; (80081a8 <vTaskSwitchContext+0xc4>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	4a08      	ldr	r2, [pc, #32]	; (80081a0 <vTaskSwitchContext+0xbc>)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <vTaskSwitchContext+0xc4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3354      	adds	r3, #84	; 0x54
 8008188:	4a08      	ldr	r2, [pc, #32]	; (80081ac <vTaskSwitchContext+0xc8>)
 800818a:	6013      	str	r3, [r2, #0]
}
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	200016c4 	.word	0x200016c4
 800819c:	200016b0 	.word	0x200016b0
 80081a0:	200016a4 	.word	0x200016a4
 80081a4:	200011cc 	.word	0x200011cc
 80081a8:	200011c8 	.word	0x200011c8
 80081ac:	2000006c 	.word	0x2000006c

080081b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10c      	bne.n	80081da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	60fb      	str	r3, [r7, #12]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081da:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <vTaskPlaceOnEventList+0x48>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3318      	adds	r3, #24
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7fe fa6d 	bl	80066c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081e8:	2101      	movs	r1, #1
 80081ea:	6838      	ldr	r0, [r7, #0]
 80081ec:	f000 fb90 	bl	8008910 <prvAddCurrentTaskToDelayedList>
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200011c8 	.word	0x200011c8

080081fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10c      	bne.n	8008228 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	b672      	cpsid	i
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	b662      	cpsie	i
 8008222:	617b      	str	r3, [r7, #20]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <vTaskPlaceOnEventListRestricted+0x58>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3318      	adds	r3, #24
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7fe fa22 	bl	800667a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	68b8      	ldr	r0, [r7, #8]
 8008246:	f000 fb63 	bl	8008910 <prvAddCurrentTaskToDelayedList>
	}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200011c8 	.word	0x200011c8

08008258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10c      	bne.n	8008288 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	b672      	cpsid	i
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	b662      	cpsie	i
 8008282:	60fb      	str	r3, [r7, #12]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3318      	adds	r3, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fa51 	bl	8006734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008292:	4b1e      	ldr	r3, [pc, #120]	; (800830c <xTaskRemoveFromEventList+0xb4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11d      	bne.n	80082d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3304      	adds	r3, #4
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fa48 	bl	8006734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4b19      	ldr	r3, [pc, #100]	; (8008310 <xTaskRemoveFromEventList+0xb8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d903      	bls.n	80082b8 <xTaskRemoveFromEventList+0x60>
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	4a16      	ldr	r2, [pc, #88]	; (8008310 <xTaskRemoveFromEventList+0xb8>)
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4a13      	ldr	r2, [pc, #76]	; (8008314 <xTaskRemoveFromEventList+0xbc>)
 80082c6:	441a      	add	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe f9d3 	bl	800667a <vListInsertEnd>
 80082d4:	e005      	b.n	80082e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	3318      	adds	r3, #24
 80082da:	4619      	mov	r1, r3
 80082dc:	480e      	ldr	r0, [pc, #56]	; (8008318 <xTaskRemoveFromEventList+0xc0>)
 80082de:	f7fe f9cc 	bl	800667a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e6:	4b0d      	ldr	r3, [pc, #52]	; (800831c <xTaskRemoveFromEventList+0xc4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d905      	bls.n	80082fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082f4:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <xTaskRemoveFromEventList+0xc8>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e001      	b.n	8008300 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008300:	697b      	ldr	r3, [r7, #20]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200016c4 	.word	0x200016c4
 8008310:	200016a4 	.word	0x200016a4
 8008314:	200011cc 	.word	0x200011cc
 8008318:	2000165c 	.word	0x2000165c
 800831c:	200011c8 	.word	0x200011c8
 8008320:	200016b0 	.word	0x200016b0

08008324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <vTaskInternalSetTimeOutState+0x24>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <vTaskInternalSetTimeOutState+0x28>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	605a      	str	r2, [r3, #4]
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	200016b4 	.word	0x200016b4
 800834c:	200016a0 	.word	0x200016a0

08008350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	b672      	cpsid	i
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	b662      	cpsie	i
 8008374:	613b      	str	r3, [r7, #16]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10c      	bne.n	800839a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	b672      	cpsid	i
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	b662      	cpsie	i
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800839a:	f000 ff77 	bl	800928c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800839e:	4b1d      	ldr	r3, [pc, #116]	; (8008414 <xTaskCheckForTimeOut+0xc4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b6:	d102      	bne.n	80083be <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	e023      	b.n	8008406 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b15      	ldr	r3, [pc, #84]	; (8008418 <xTaskCheckForTimeOut+0xc8>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d007      	beq.n	80083da <xTaskCheckForTimeOut+0x8a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d302      	bcc.n	80083da <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e015      	b.n	8008406 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d20b      	bcs.n	80083fc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff ff97 	bl	8008324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	e004      	b.n	8008406 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008402:	2301      	movs	r3, #1
 8008404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008406:	f000 ff75 	bl	80092f4 <vPortExitCritical>

	return xReturn;
 800840a:	69fb      	ldr	r3, [r7, #28]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	200016a0 	.word	0x200016a0
 8008418:	200016b4 	.word	0x200016b4

0800841c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008420:	4b03      	ldr	r3, [pc, #12]	; (8008430 <vTaskMissedYield+0x14>)
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	200016b0 	.word	0x200016b0

08008434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800843c:	f000 f852 	bl	80084e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <prvIdleTask+0x28>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d9f9      	bls.n	800843c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <prvIdleTask+0x2c>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008458:	e7f0      	b.n	800843c <prvIdleTask+0x8>
 800845a:	bf00      	nop
 800845c:	200011cc 	.word	0x200011cc
 8008460:	e000ed04 	.word	0xe000ed04

08008464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800846a:	2300      	movs	r3, #0
 800846c:	607b      	str	r3, [r7, #4]
 800846e:	e00c      	b.n	800848a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4a12      	ldr	r2, [pc, #72]	; (80084c4 <prvInitialiseTaskLists+0x60>)
 800847c:	4413      	add	r3, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe f8ce 	bl	8006620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3301      	adds	r3, #1
 8008488:	607b      	str	r3, [r7, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b37      	cmp	r3, #55	; 0x37
 800848e:	d9ef      	bls.n	8008470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008490:	480d      	ldr	r0, [pc, #52]	; (80084c8 <prvInitialiseTaskLists+0x64>)
 8008492:	f7fe f8c5 	bl	8006620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008496:	480d      	ldr	r0, [pc, #52]	; (80084cc <prvInitialiseTaskLists+0x68>)
 8008498:	f7fe f8c2 	bl	8006620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800849c:	480c      	ldr	r0, [pc, #48]	; (80084d0 <prvInitialiseTaskLists+0x6c>)
 800849e:	f7fe f8bf 	bl	8006620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084a2:	480c      	ldr	r0, [pc, #48]	; (80084d4 <prvInitialiseTaskLists+0x70>)
 80084a4:	f7fe f8bc 	bl	8006620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084a8:	480b      	ldr	r0, [pc, #44]	; (80084d8 <prvInitialiseTaskLists+0x74>)
 80084aa:	f7fe f8b9 	bl	8006620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <prvInitialiseTaskLists+0x78>)
 80084b0:	4a05      	ldr	r2, [pc, #20]	; (80084c8 <prvInitialiseTaskLists+0x64>)
 80084b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084b4:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <prvInitialiseTaskLists+0x7c>)
 80084b6:	4a05      	ldr	r2, [pc, #20]	; (80084cc <prvInitialiseTaskLists+0x68>)
 80084b8:	601a      	str	r2, [r3, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200011cc 	.word	0x200011cc
 80084c8:	2000162c 	.word	0x2000162c
 80084cc:	20001640 	.word	0x20001640
 80084d0:	2000165c 	.word	0x2000165c
 80084d4:	20001670 	.word	0x20001670
 80084d8:	20001688 	.word	0x20001688
 80084dc:	20001654 	.word	0x20001654
 80084e0:	20001658 	.word	0x20001658

080084e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ea:	e019      	b.n	8008520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084ec:	f000 fece 	bl	800928c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <prvCheckTasksWaitingTermination+0x50>)
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3304      	adds	r3, #4
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe f919 	bl	8006734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <prvCheckTasksWaitingTermination+0x54>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3b01      	subs	r3, #1
 8008508:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <prvCheckTasksWaitingTermination+0x54>)
 800850a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800850c:	4b0b      	ldr	r3, [pc, #44]	; (800853c <prvCheckTasksWaitingTermination+0x58>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3b01      	subs	r3, #1
 8008512:	4a0a      	ldr	r2, [pc, #40]	; (800853c <prvCheckTasksWaitingTermination+0x58>)
 8008514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008516:	f000 feed 	bl	80092f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f810 	bl	8008540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <prvCheckTasksWaitingTermination+0x58>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e1      	bne.n	80084ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20001670 	.word	0x20001670
 8008538:	2000169c 	.word	0x2000169c
 800853c:	20001684 	.word	0x20001684

08008540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3354      	adds	r3, #84	; 0x54
 800854c:	4618      	mov	r0, r3
 800854e:	f001 f9b5 	bl	80098bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008558:	2b00      	cmp	r3, #0
 800855a:	d108      	bne.n	800856e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	4618      	mov	r0, r3
 8008562:	f001 f889 	bl	8009678 <vPortFree>
				vPortFree( pxTCB );
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 f886 	bl	8009678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800856c:	e01a      	b.n	80085a4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008574:	2b01      	cmp	r3, #1
 8008576:	d103      	bne.n	8008580 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f87d 	bl	8009678 <vPortFree>
	}
 800857e:	e011      	b.n	80085a4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008586:	2b02      	cmp	r3, #2
 8008588:	d00c      	beq.n	80085a4 <prvDeleteTCB+0x64>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	b672      	cpsid	i
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	b662      	cpsie	i
 800859e:	60fb      	str	r3, [r7, #12]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <prvDeleteTCB+0x62>
	}
 80085a4:	bf00      	nop
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <prvResetNextTaskUnblockTime+0x38>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085bc:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <prvResetNextTaskUnblockTime+0x3c>)
 80085be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085c4:	e008      	b.n	80085d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c6:	4b07      	ldr	r3, [pc, #28]	; (80085e4 <prvResetNextTaskUnblockTime+0x38>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <prvResetNextTaskUnblockTime+0x3c>)
 80085d6:	6013      	str	r3, [r2, #0]
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20001654 	.word	0x20001654
 80085e8:	200016bc 	.word	0x200016bc

080085ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <xTaskGetSchedulerState+0x34>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085fa:	2301      	movs	r3, #1
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	e008      	b.n	8008612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008600:	4b08      	ldr	r3, [pc, #32]	; (8008624 <xTaskGetSchedulerState+0x38>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d102      	bne.n	800860e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008608:	2302      	movs	r3, #2
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	e001      	b.n	8008612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008612:	687b      	ldr	r3, [r7, #4]
	}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	200016a8 	.word	0x200016a8
 8008624:	200016c4 	.word	0x200016c4

08008628 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d051      	beq.n	80086e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	4b2a      	ldr	r3, [pc, #168]	; (80086ec <xTaskPriorityInherit+0xc4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	429a      	cmp	r2, r3
 800864a:	d241      	bcs.n	80086d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db06      	blt.n	8008662 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <xTaskPriorityInherit+0xc4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6959      	ldr	r1, [r3, #20]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <xTaskPriorityInherit+0xc8>)
 8008674:	4413      	add	r3, r2
 8008676:	4299      	cmp	r1, r3
 8008678:	d122      	bne.n	80086c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	3304      	adds	r3, #4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe f858 	bl	8006734 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008684:	4b19      	ldr	r3, [pc, #100]	; (80086ec <xTaskPriorityInherit+0xc4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	4b18      	ldr	r3, [pc, #96]	; (80086f4 <xTaskPriorityInherit+0xcc>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d903      	bls.n	80086a2 <xTaskPriorityInherit+0x7a>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <xTaskPriorityInherit+0xcc>)
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4a10      	ldr	r2, [pc, #64]	; (80086f0 <xTaskPriorityInherit+0xc8>)
 80086b0:	441a      	add	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4619      	mov	r1, r3
 80086b8:	4610      	mov	r0, r2
 80086ba:	f7fd ffde 	bl	800667a <vListInsertEnd>
 80086be:	e004      	b.n	80086ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <xTaskPriorityInherit+0xc4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086ca:	2301      	movs	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	e008      	b.n	80086e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <xTaskPriorityInherit+0xc4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	429a      	cmp	r2, r3
 80086dc:	d201      	bcs.n	80086e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086e2:	68fb      	ldr	r3, [r7, #12]
	}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	200011c8 	.word	0x200011c8
 80086f0:	200011cc 	.word	0x200011cc
 80086f4:	200016a4 	.word	0x200016a4

080086f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d05a      	beq.n	80087c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800870e:	4b30      	ldr	r3, [pc, #192]	; (80087d0 <xTaskPriorityDisinherit+0xd8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	429a      	cmp	r2, r3
 8008716:	d00c      	beq.n	8008732 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	b672      	cpsid	i
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	b662      	cpsie	i
 800872c:	60fb      	str	r3, [r7, #12]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10c      	bne.n	8008754 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	b672      	cpsid	i
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	b662      	cpsie	i
 800874e:	60bb      	str	r3, [r7, #8]
}
 8008750:	bf00      	nop
 8008752:	e7fe      	b.n	8008752 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008766:	429a      	cmp	r2, r3
 8008768:	d02c      	beq.n	80087c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876e:	2b00      	cmp	r3, #0
 8008770:	d128      	bne.n	80087c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	3304      	adds	r3, #4
 8008776:	4618      	mov	r0, r3
 8008778:	f7fd ffdc 	bl	8006734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008794:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <xTaskPriorityDisinherit+0xdc>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d903      	bls.n	80087a4 <xTaskPriorityDisinherit+0xac>
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	4a0c      	ldr	r2, [pc, #48]	; (80087d4 <xTaskPriorityDisinherit+0xdc>)
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4a09      	ldr	r2, [pc, #36]	; (80087d8 <xTaskPriorityDisinherit+0xe0>)
 80087b2:	441a      	add	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7fd ff5d 	bl	800667a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087c0:	2301      	movs	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087c4:	697b      	ldr	r3, [r7, #20]
	}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200011c8 	.word	0x200011c8
 80087d4:	200016a4 	.word	0x200016a4
 80087d8:	200011cc 	.word	0x200011cc

080087dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087ea:	2301      	movs	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d06e      	beq.n	80088d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10c      	bne.n	8008816 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	b672      	cpsid	i
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	b662      	cpsie	i
 8008810:	60fb      	str	r3, [r7, #12]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d902      	bls.n	8008826 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	e002      	b.n	800882c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	429a      	cmp	r2, r3
 8008834:	d04d      	beq.n	80088d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	429a      	cmp	r2, r3
 800883e:	d148      	bne.n	80088d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008840:	4b26      	ldr	r3, [pc, #152]	; (80088dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	429a      	cmp	r2, r3
 8008848:	d10c      	bne.n	8008864 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	60bb      	str	r3, [r7, #8]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	db04      	blt.n	8008882 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	6959      	ldr	r1, [r3, #20]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008892:	4413      	add	r3, r2
 8008894:	4299      	cmp	r1, r3
 8008896:	d11c      	bne.n	80088d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fd ff49 	bl	8006734 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d903      	bls.n	80088b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a07      	ldr	r2, [pc, #28]	; (80088e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80088c4:	441a      	add	r2, r3
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f7fd fed4 	bl	800667a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088d2:	bf00      	nop
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200011c8 	.word	0x200011c8
 80088e0:	200011cc 	.word	0x200011cc
 80088e4:	200016a4 	.word	0x200016a4

080088e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <pvTaskIncrementMutexHeldCount+0x24>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088f4:	4b05      	ldr	r3, [pc, #20]	; (800890c <pvTaskIncrementMutexHeldCount+0x24>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088fa:	3201      	adds	r2, #1
 80088fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80088fe:	4b03      	ldr	r3, [pc, #12]	; (800890c <pvTaskIncrementMutexHeldCount+0x24>)
 8008900:	681b      	ldr	r3, [r3, #0]
	}
 8008902:	4618      	mov	r0, r3
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	200011c8 	.word	0x200011c8

08008910 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800891a:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008920:	4b20      	ldr	r3, [pc, #128]	; (80089a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3304      	adds	r3, #4
 8008926:	4618      	mov	r0, r3
 8008928:	f7fd ff04 	bl	8006734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008932:	d10a      	bne.n	800894a <prvAddCurrentTaskToDelayedList+0x3a>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4819      	ldr	r0, [pc, #100]	; (80089a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008944:	f7fd fe99 	bl	800667a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008948:	e026      	b.n	8008998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4413      	add	r3, r2
 8008950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008952:	4b14      	ldr	r3, [pc, #80]	; (80089a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	429a      	cmp	r2, r3
 8008960:	d209      	bcs.n	8008976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008962:	4b12      	ldr	r3, [pc, #72]	; (80089ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3304      	adds	r3, #4
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f7fd fea7 	bl	80066c2 <vListInsert>
}
 8008974:	e010      	b.n	8008998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008976:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3304      	adds	r3, #4
 8008980:	4619      	mov	r1, r3
 8008982:	4610      	mov	r0, r2
 8008984:	f7fd fe9d 	bl	80066c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	d202      	bcs.n	8008998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008992:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	6013      	str	r3, [r2, #0]
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	200016a0 	.word	0x200016a0
 80089a4:	200011c8 	.word	0x200011c8
 80089a8:	20001688 	.word	0x20001688
 80089ac:	20001658 	.word	0x20001658
 80089b0:	20001654 	.word	0x20001654
 80089b4:	200016bc 	.word	0x200016bc

080089b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08a      	sub	sp, #40	; 0x28
 80089bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089c2:	f000 fb15 	bl	8008ff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089c6:	4b1d      	ldr	r3, [pc, #116]	; (8008a3c <xTimerCreateTimerTask+0x84>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d021      	beq.n	8008a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089d6:	1d3a      	adds	r2, r7, #4
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	f107 030c 	add.w	r3, r7, #12
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fd fe03 	bl	80065ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	9202      	str	r2, [sp, #8]
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	2302      	movs	r3, #2
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	2300      	movs	r3, #0
 80089f6:	460a      	mov	r2, r1
 80089f8:	4911      	ldr	r1, [pc, #68]	; (8008a40 <xTimerCreateTimerTask+0x88>)
 80089fa:	4812      	ldr	r0, [pc, #72]	; (8008a44 <xTimerCreateTimerTask+0x8c>)
 80089fc:	f7fe ff1a 	bl	8007834 <xTaskCreateStatic>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4a11      	ldr	r2, [pc, #68]	; (8008a48 <xTimerCreateTimerTask+0x90>)
 8008a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <xTimerCreateTimerTask+0x90>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10c      	bne.n	8008a32 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	b672      	cpsid	i
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	b662      	cpsie	i
 8008a2c:	613b      	str	r3, [r7, #16]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008a32:	697b      	ldr	r3, [r7, #20]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	200016f8 	.word	0x200016f8
 8008a40:	08009ac4 	.word	0x08009ac4
 8008a44:	08008b89 	.word	0x08008b89
 8008a48:	200016fc 	.word	0x200016fc

08008a4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08a      	sub	sp, #40	; 0x28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10c      	bne.n	8008a7e <xTimerGenericCommand+0x32>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	b672      	cpsid	i
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	b662      	cpsie	i
 8008a78:	623b      	str	r3, [r7, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <xTimerGenericCommand+0x9c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d02a      	beq.n	8008adc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	dc18      	bgt.n	8008aca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a98:	f7ff fda8 	bl	80085ec <xTaskGetSchedulerState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d109      	bne.n	8008ab6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008aa2:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <xTimerGenericCommand+0x9c>)
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	f107 0110 	add.w	r1, r7, #16
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aae:	f7fe f82f 	bl	8006b10 <xQueueGenericSend>
 8008ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ab4:	e012      	b.n	8008adc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <xTimerGenericCommand+0x9c>)
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	f107 0110 	add.w	r1, r7, #16
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f7fe f825 	bl	8006b10 <xQueueGenericSend>
 8008ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ac8:	e008      	b.n	8008adc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008aca:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <xTimerGenericCommand+0x9c>)
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	f107 0110 	add.w	r1, r7, #16
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	f7fe f921 	bl	8006d1c <xQueueGenericSendFromISR>
 8008ada:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3728      	adds	r7, #40	; 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200016f8 	.word	0x200016f8

08008aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af6:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <prvProcessExpiredTimer+0x98>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fd fe15 	bl	8006734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d024      	beq.n	8008b62 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	699a      	ldr	r2, [r3, #24]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	18d1      	adds	r1, r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	6978      	ldr	r0, [r7, #20]
 8008b26:	f000 f8d3 	bl	8008cd0 <prvInsertTimerInActiveList>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d021      	beq.n	8008b74 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b30:	2300      	movs	r3, #0
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff ff86 	bl	8008a4c <xTimerGenericCommand>
 8008b40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d115      	bne.n	8008b74 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	60fb      	str	r3, [r7, #12]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b68:	f023 0301 	bic.w	r3, r3, #1
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	6978      	ldr	r0, [r7, #20]
 8008b7a:	4798      	blx	r3
}
 8008b7c:	bf00      	nop
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	200016f0 	.word	0x200016f0

08008b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b90:	f107 0308 	add.w	r3, r7, #8
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f857 	bl	8008c48 <prvGetNextExpireTime>
 8008b9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f803 	bl	8008bac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ba6:	f000 f8d5 	bl	8008d54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008baa:	e7f1      	b.n	8008b90 <prvTimerTask+0x8>

08008bac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bb6:	f7ff f91b 	bl	8007df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bba:	f107 0308 	add.w	r3, r7, #8
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 f866 	bl	8008c90 <prvSampleTimeNow>
 8008bc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d130      	bne.n	8008c2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <prvProcessTimerOrBlockTask+0x3c>
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d806      	bhi.n	8008be8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bda:	f7ff f917 	bl	8007e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bde:	68f9      	ldr	r1, [r7, #12]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff ff83 	bl	8008aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008be6:	e024      	b.n	8008c32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d008      	beq.n	8008c00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bee:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <prvProcessTimerOrBlockTask+0x90>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <prvProcessTimerOrBlockTask+0x50>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <prvProcessTimerOrBlockTask+0x52>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c00:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <prvProcessTimerOrBlockTask+0x94>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f7fe fddd 	bl	80077cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c12:	f7ff f8fb 	bl	8007e0c <xTaskResumeAll>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c1c:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <prvProcessTimerOrBlockTask+0x98>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	f3bf 8f6f 	isb	sy
}
 8008c2c:	e001      	b.n	8008c32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c2e:	f7ff f8ed 	bl	8007e0c <xTaskResumeAll>
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200016f4 	.word	0x200016f4
 8008c40:	200016f8 	.word	0x200016f8
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c50:	4b0e      	ldr	r3, [pc, #56]	; (8008c8c <prvGetNextExpireTime+0x44>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <prvGetNextExpireTime+0x16>
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	e000      	b.n	8008c60 <prvGetNextExpireTime+0x18>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d105      	bne.n	8008c78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c6c:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <prvGetNextExpireTime+0x44>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e001      	b.n	8008c7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	200016f0 	.word	0x200016f0

08008c90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c98:	f7ff f958 	bl	8007f4c <xTaskGetTickCount>
 8008c9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c9e:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <prvSampleTimeNow+0x3c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d205      	bcs.n	8008cb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ca8:	f000 f93c 	bl	8008f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	e002      	b.n	8008cba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cba:	4a04      	ldr	r2, [pc, #16]	; (8008ccc <prvSampleTimeNow+0x3c>)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20001700 	.word	0x20001700

08008cd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d812      	bhi.n	8008d1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad2      	subs	r2, r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d302      	bcc.n	8008d0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e01b      	b.n	8008d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <prvInsertTimerInActiveList+0x7c>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f7fd fcd4 	bl	80066c2 <vListInsert>
 8008d1a:	e012      	b.n	8008d42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d206      	bcs.n	8008d32 <prvInsertTimerInActiveList+0x62>
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d302      	bcc.n	8008d32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	e007      	b.n	8008d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <prvInsertTimerInActiveList+0x80>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7fd fcc0 	bl	80066c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d42:	697b      	ldr	r3, [r7, #20]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200016f4 	.word	0x200016f4
 8008d50:	200016f0 	.word	0x200016f0

08008d54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	; 0x38
 8008d58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d5a:	e0d0      	b.n	8008efe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	da1a      	bge.n	8008d98 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d62:	1d3b      	adds	r3, r7, #4
 8008d64:	3304      	adds	r3, #4
 8008d66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10c      	bne.n	8008d88 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	b672      	cpsid	i
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	b662      	cpsie	i
 8008d82:	61fb      	str	r3, [r7, #28]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8e:	6850      	ldr	r0, [r2, #4]
 8008d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d92:	6892      	ldr	r2, [r2, #8]
 8008d94:	4611      	mov	r1, r2
 8008d96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f2c0 80af 	blt.w	8008efe <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	3304      	adds	r3, #4
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fd fcbf 	bl	8006734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008db6:	463b      	mov	r3, r7
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff ff69 	bl	8008c90 <prvSampleTimeNow>
 8008dbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	f200 809a 	bhi.w	8008efc <prvProcessReceivedCommands+0x1a8>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <prvProcessReceivedCommands+0x7c>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008df9 	.word	0x08008df9
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008df9 	.word	0x08008df9
 8008ddc:	08008e71 	.word	0x08008e71
 8008de0:	08008e85 	.word	0x08008e85
 8008de4:	08008ed3 	.word	0x08008ed3
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008df9 	.word	0x08008df9
 8008df0:	08008e71 	.word	0x08008e71
 8008df4:	08008e85 	.word	0x08008e85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	18d1      	adds	r1, r2, r3
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e18:	f7ff ff5a 	bl	8008cd0 <prvInsertTimerInActiveList>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d06d      	beq.n	8008efe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d062      	beq.n	8008efe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	441a      	add	r2, r3
 8008e40:	2300      	movs	r3, #0
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4a:	f7ff fdff 	bl	8008a4c <xTimerGenericCommand>
 8008e4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d153      	bne.n	8008efe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	b672      	cpsid	i
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	b662      	cpsie	i
 8008e6a:	61bb      	str	r3, [r7, #24]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e76:	f023 0301 	bic.w	r3, r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e82:	e03c      	b.n	8008efe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10c      	bne.n	8008ebe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	b672      	cpsid	i
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	b662      	cpsie	i
 8008eb8:	617b      	str	r3, [r7, #20]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	18d1      	adds	r1, r2, r3
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ecc:	f7ff ff00 	bl	8008cd0 <prvInsertTimerInActiveList>
					break;
 8008ed0:	e015      	b.n	8008efe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d103      	bne.n	8008ee8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee2:	f000 fbc9 	bl	8009678 <vPortFree>
 8008ee6:	e00a      	b.n	8008efe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eee:	f023 0301 	bic.w	r3, r3, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008efa:	e000      	b.n	8008efe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008efe:	4b08      	ldr	r3, [pc, #32]	; (8008f20 <prvProcessReceivedCommands+0x1cc>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	1d39      	adds	r1, r7, #4
 8008f04:	2200      	movs	r2, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f83e 	bl	8006f88 <xQueueReceive>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f af24 	bne.w	8008d5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	3730      	adds	r7, #48	; 0x30
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200016f8 	.word	0x200016f8

08008f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f2a:	e04a      	b.n	8008fc2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f2c:	4b2e      	ldr	r3, [pc, #184]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f36:	4b2c      	ldr	r3, [pc, #176]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd fbf5 	bl	8006734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d030      	beq.n	8008fc2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4413      	add	r3, r2
 8008f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d90e      	bls.n	8008f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f7e:	4b1a      	ldr	r3, [pc, #104]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7fd fb9a 	bl	80066c2 <vListInsert>
 8008f8e:	e018      	b.n	8008fc2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f90:	2300      	movs	r3, #0
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	2100      	movs	r1, #0
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fd56 	bl	8008a4c <xTimerGenericCommand>
 8008fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10c      	bne.n	8008fc2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	b672      	cpsid	i
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	b662      	cpsie	i
 8008fbc:	603b      	str	r3, [r7, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fc2:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1af      	bne.n	8008f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fcc:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <prvSwitchTimerLists+0xc8>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a04      	ldr	r2, [pc, #16]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fda:	4a04      	ldr	r2, [pc, #16]	; (8008fec <prvSwitchTimerLists+0xc8>)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	6013      	str	r3, [r2, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	200016f0 	.word	0x200016f0
 8008fec:	200016f4 	.word	0x200016f4

08008ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ff6:	f000 f949 	bl	800928c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ffa:	4b15      	ldr	r3, [pc, #84]	; (8009050 <prvCheckForValidListAndQueue+0x60>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d120      	bne.n	8009044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009002:	4814      	ldr	r0, [pc, #80]	; (8009054 <prvCheckForValidListAndQueue+0x64>)
 8009004:	f7fd fb0c 	bl	8006620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009008:	4813      	ldr	r0, [pc, #76]	; (8009058 <prvCheckForValidListAndQueue+0x68>)
 800900a:	f7fd fb09 	bl	8006620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800900e:	4b13      	ldr	r3, [pc, #76]	; (800905c <prvCheckForValidListAndQueue+0x6c>)
 8009010:	4a10      	ldr	r2, [pc, #64]	; (8009054 <prvCheckForValidListAndQueue+0x64>)
 8009012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009014:	4b12      	ldr	r3, [pc, #72]	; (8009060 <prvCheckForValidListAndQueue+0x70>)
 8009016:	4a10      	ldr	r2, [pc, #64]	; (8009058 <prvCheckForValidListAndQueue+0x68>)
 8009018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800901a:	2300      	movs	r3, #0
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <prvCheckForValidListAndQueue+0x74>)
 8009020:	4a11      	ldr	r2, [pc, #68]	; (8009068 <prvCheckForValidListAndQueue+0x78>)
 8009022:	2110      	movs	r1, #16
 8009024:	200a      	movs	r0, #10
 8009026:	f7fd fc19 	bl	800685c <xQueueGenericCreateStatic>
 800902a:	4603      	mov	r3, r0
 800902c:	4a08      	ldr	r2, [pc, #32]	; (8009050 <prvCheckForValidListAndQueue+0x60>)
 800902e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <prvCheckForValidListAndQueue+0x60>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <prvCheckForValidListAndQueue+0x60>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	490b      	ldr	r1, [pc, #44]	; (800906c <prvCheckForValidListAndQueue+0x7c>)
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fb70 	bl	8007724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009044:	f000 f956 	bl	80092f4 <vPortExitCritical>
}
 8009048:	bf00      	nop
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	200016f8 	.word	0x200016f8
 8009054:	200016c8 	.word	0x200016c8
 8009058:	200016dc 	.word	0x200016dc
 800905c:	200016f0 	.word	0x200016f0
 8009060:	200016f4 	.word	0x200016f4
 8009064:	200017a4 	.word	0x200017a4
 8009068:	20001704 	.word	0x20001704
 800906c:	08009acc 	.word	0x08009acc

08009070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3b04      	subs	r3, #4
 8009080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3b04      	subs	r3, #4
 800908e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f023 0201 	bic.w	r2, r3, #1
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3b04      	subs	r3, #4
 800909e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090a0:	4a0c      	ldr	r2, [pc, #48]	; (80090d4 <pxPortInitialiseStack+0x64>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3b14      	subs	r3, #20
 80090aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3b04      	subs	r3, #4
 80090b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f06f 0202 	mvn.w	r2, #2
 80090be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3b20      	subs	r3, #32
 80090c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	080090d9 	.word	0x080090d9

080090d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090e2:	4b14      	ldr	r3, [pc, #80]	; (8009134 <prvTaskExitError+0x5c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090ea:	d00c      	beq.n	8009106 <prvTaskExitError+0x2e>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	b672      	cpsid	i
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	b662      	cpsie	i
 8009100:	60fb      	str	r3, [r7, #12]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <prvTaskExitError+0x2c>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	b672      	cpsid	i
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	b662      	cpsie	i
 800911a:	60bb      	str	r3, [r7, #8]
}
 800911c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800911e:	bf00      	nop
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0fc      	beq.n	8009120 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	2000001c 	.word	0x2000001c
	...

08009140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	200011c8 	.word	0x200011c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009168:	4808      	ldr	r0, [pc, #32]	; (800918c <prvPortStartFirstTask+0x24>)
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f380 8808 	msr	MSP, r0
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8814 	msr	CONTROL, r0
 800917a:	b662      	cpsie	i
 800917c:	b661      	cpsie	f
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	df00      	svc	0
 8009188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800918a:	bf00      	nop
 800918c:	e000ed08 	.word	0xe000ed08

08009190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009196:	4b37      	ldr	r3, [pc, #220]	; (8009274 <xPortStartScheduler+0xe4>)
 8009198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	4b2f      	ldr	r3, [pc, #188]	; (8009278 <xPortStartScheduler+0xe8>)
 80091bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091be:	4b2f      	ldr	r3, [pc, #188]	; (800927c <xPortStartScheduler+0xec>)
 80091c0:	2207      	movs	r2, #7
 80091c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091c4:	e009      	b.n	80091da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80091c6:	4b2d      	ldr	r3, [pc, #180]	; (800927c <xPortStartScheduler+0xec>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	4a2b      	ldr	r2, [pc, #172]	; (800927c <xPortStartScheduler+0xec>)
 80091ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e2:	2b80      	cmp	r3, #128	; 0x80
 80091e4:	d0ef      	beq.n	80091c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091e6:	4b25      	ldr	r3, [pc, #148]	; (800927c <xPortStartScheduler+0xec>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1c3 0307 	rsb	r3, r3, #7
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d00c      	beq.n	800920c <xPortStartScheduler+0x7c>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	b672      	cpsid	i
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	b662      	cpsie	i
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <xPortStartScheduler+0xec>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	4a1a      	ldr	r2, [pc, #104]	; (800927c <xPortStartScheduler+0xec>)
 8009214:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <xPortStartScheduler+0xec>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800921e:	4a17      	ldr	r2, [pc, #92]	; (800927c <xPortStartScheduler+0xec>)
 8009220:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800922a:	4b15      	ldr	r3, [pc, #84]	; (8009280 <xPortStartScheduler+0xf0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a14      	ldr	r2, [pc, #80]	; (8009280 <xPortStartScheduler+0xf0>)
 8009230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009234:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009236:	4b12      	ldr	r3, [pc, #72]	; (8009280 <xPortStartScheduler+0xf0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a11      	ldr	r2, [pc, #68]	; (8009280 <xPortStartScheduler+0xf0>)
 800923c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009240:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009242:	f000 f8dd 	bl	8009400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <xPortStartScheduler+0xf4>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800924c:	f000 f8fc 	bl	8009448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009250:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <xPortStartScheduler+0xf8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a0c      	ldr	r2, [pc, #48]	; (8009288 <xPortStartScheduler+0xf8>)
 8009256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800925a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800925c:	f7ff ff84 	bl	8009168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009260:	f7fe ff40 	bl	80080e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009264:	f7ff ff38 	bl	80090d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	e000e400 	.word	0xe000e400
 8009278:	200017f4 	.word	0x200017f4
 800927c:	200017f8 	.word	0x200017f8
 8009280:	e000ed20 	.word	0xe000ed20
 8009284:	2000001c 	.word	0x2000001c
 8009288:	e000ef34 	.word	0xe000ef34

0800928c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	b672      	cpsid	i
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	b662      	cpsie	i
 80092a6:	607b      	str	r3, [r7, #4]
}
 80092a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092aa:	4b10      	ldr	r3, [pc, #64]	; (80092ec <vPortEnterCritical+0x60>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a0e      	ldr	r2, [pc, #56]	; (80092ec <vPortEnterCritical+0x60>)
 80092b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092b4:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <vPortEnterCritical+0x60>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d111      	bne.n	80092e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <vPortEnterCritical+0x64>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00c      	beq.n	80092e0 <vPortEnterCritical+0x54>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	603b      	str	r3, [r7, #0]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <vPortEnterCritical+0x52>
	}
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	2000001c 	.word	0x2000001c
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <vPortExitCritical+0x54>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10c      	bne.n	800931c <vPortExitCritical+0x28>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	607b      	str	r3, [r7, #4]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <vPortExitCritical+0x54>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3b01      	subs	r3, #1
 8009322:	4a09      	ldr	r2, [pc, #36]	; (8009348 <vPortExitCritical+0x54>)
 8009324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009326:	4b08      	ldr	r3, [pc, #32]	; (8009348 <vPortExitCritical+0x54>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d105      	bne.n	800933a <vPortExitCritical+0x46>
 800932e:	2300      	movs	r3, #0
 8009330:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	f383 8811 	msr	BASEPRI, r3
}
 8009338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	2000001c 	.word	0x2000001c
 800934c:	00000000 	.word	0x00000000

08009350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009350:	f3ef 8009 	mrs	r0, PSP
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <pxCurrentTCBConst>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	f01e 0f10 	tst.w	lr, #16
 8009360:	bf08      	it	eq
 8009362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	6010      	str	r0, [r2, #0]
 800936c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009374:	b672      	cpsid	i
 8009376:	f380 8811 	msr	BASEPRI, r0
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	b662      	cpsie	i
 8009384:	f7fe feae 	bl	80080e4 <vTaskSwitchContext>
 8009388:	f04f 0000 	mov.w	r0, #0
 800938c:	f380 8811 	msr	BASEPRI, r0
 8009390:	bc09      	pop	{r0, r3}
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	6808      	ldr	r0, [r1, #0]
 8009396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f01e 0f10 	tst.w	lr, #16
 800939e:	bf08      	it	eq
 80093a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093a4:	f380 8809 	msr	PSP, r0
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop

080093b0 <pxCurrentTCBConst>:
 80093b0:	200011c8 	.word	0x200011c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	b672      	cpsid	i
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	b662      	cpsie	i
 80093d2:	607b      	str	r3, [r7, #4]
}
 80093d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093d6:	f7fe fdc9 	bl	8007f6c <xTaskIncrementTick>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <SysTick_Handler+0x44>)
 80093e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f383 8811 	msr	BASEPRI, r3
}
 80093f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009404:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <vPortSetupTimerInterrupt+0x34>)
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800940a:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <vPortSetupTimerInterrupt+0x38>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <vPortSetupTimerInterrupt+0x3c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <vPortSetupTimerInterrupt+0x40>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	099b      	lsrs	r3, r3, #6
 800941c:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vPortSetupTimerInterrupt+0x44>)
 800941e:	3b01      	subs	r3, #1
 8009420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009422:	4b04      	ldr	r3, [pc, #16]	; (8009434 <vPortSetupTimerInterrupt+0x34>)
 8009424:	2207      	movs	r2, #7
 8009426:	601a      	str	r2, [r3, #0]
}
 8009428:	bf00      	nop
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	e000e010 	.word	0xe000e010
 8009438:	e000e018 	.word	0xe000e018
 800943c:	20000010 	.word	0x20000010
 8009440:	10624dd3 	.word	0x10624dd3
 8009444:	e000e014 	.word	0xe000e014

08009448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009458 <vPortEnableVFP+0x10>
 800944c:	6801      	ldr	r1, [r0, #0]
 800944e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009452:	6001      	str	r1, [r0, #0]
 8009454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009456:	bf00      	nop
 8009458:	e000ed88 	.word	0xe000ed88

0800945c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009462:	f3ef 8305 	mrs	r3, IPSR
 8009466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b0f      	cmp	r3, #15
 800946c:	d916      	bls.n	800949c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800946e:	4a19      	ldr	r2, [pc, #100]	; (80094d4 <vPortValidateInterruptPriority+0x78>)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4413      	add	r3, r2
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009478:	4b17      	ldr	r3, [pc, #92]	; (80094d8 <vPortValidateInterruptPriority+0x7c>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	7afa      	ldrb	r2, [r7, #11]
 800947e:	429a      	cmp	r2, r3
 8009480:	d20c      	bcs.n	800949c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	b672      	cpsid	i
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	b662      	cpsie	i
 8009496:	607b      	str	r3, [r7, #4]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <vPortValidateInterruptPriority+0x80>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <vPortValidateInterruptPriority+0x84>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d90c      	bls.n	80094c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	b672      	cpsid	i
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	b662      	cpsie	i
 80094c0:	603b      	str	r3, [r7, #0]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <vPortValidateInterruptPriority+0x68>
	}
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	e000e3f0 	.word	0xe000e3f0
 80094d8:	200017f4 	.word	0x200017f4
 80094dc:	e000ed0c 	.word	0xe000ed0c
 80094e0:	200017f8 	.word	0x200017f8

080094e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094f0:	f7fe fc7e 	bl	8007df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094f4:	4b5b      	ldr	r3, [pc, #364]	; (8009664 <pvPortMalloc+0x180>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094fc:	f000 f91a 	bl	8009734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009500:	4b59      	ldr	r3, [pc, #356]	; (8009668 <pvPortMalloc+0x184>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4013      	ands	r3, r2
 8009508:	2b00      	cmp	r3, #0
 800950a:	f040 8092 	bne.w	8009632 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01f      	beq.n	8009554 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009514:	2208      	movs	r2, #8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4413      	add	r3, r2
 800951a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	2b00      	cmp	r3, #0
 8009524:	d016      	beq.n	8009554 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f023 0307 	bic.w	r3, r3, #7
 800952c:	3308      	adds	r3, #8
 800952e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <pvPortMalloc+0x70>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	617b      	str	r3, [r7, #20]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d06b      	beq.n	8009632 <pvPortMalloc+0x14e>
 800955a:	4b44      	ldr	r3, [pc, #272]	; (800966c <pvPortMalloc+0x188>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d866      	bhi.n	8009632 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009564:	4b42      	ldr	r3, [pc, #264]	; (8009670 <pvPortMalloc+0x18c>)
 8009566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009568:	4b41      	ldr	r3, [pc, #260]	; (8009670 <pvPortMalloc+0x18c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800956e:	e004      	b.n	800957a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d903      	bls.n	800958c <pvPortMalloc+0xa8>
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f1      	bne.n	8009570 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800958c:	4b35      	ldr	r3, [pc, #212]	; (8009664 <pvPortMalloc+0x180>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009592:	429a      	cmp	r2, r3
 8009594:	d04d      	beq.n	8009632 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2208      	movs	r2, #8
 800959c:	4413      	add	r3, r2
 800959e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	2308      	movs	r3, #8
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d921      	bls.n	80095fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00c      	beq.n	80095e4 <pvPortMalloc+0x100>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	b672      	cpsid	i
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	b662      	cpsie	i
 80095de:	613b      	str	r3, [r7, #16]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095f6:	69b8      	ldr	r0, [r7, #24]
 80095f8:	f000 f8fe 	bl	80097f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095fc:	4b1b      	ldr	r3, [pc, #108]	; (800966c <pvPortMalloc+0x188>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	4a19      	ldr	r2, [pc, #100]	; (800966c <pvPortMalloc+0x188>)
 8009608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800960a:	4b18      	ldr	r3, [pc, #96]	; (800966c <pvPortMalloc+0x188>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b19      	ldr	r3, [pc, #100]	; (8009674 <pvPortMalloc+0x190>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <pvPortMalloc+0x188>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a16      	ldr	r2, [pc, #88]	; (8009674 <pvPortMalloc+0x190>)
 800961c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <pvPortMalloc+0x184>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	431a      	orrs	r2, r3
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009632:	f7fe fbeb 	bl	8007e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <pvPortMalloc+0x176>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
 8009654:	60fb      	str	r3, [r7, #12]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <pvPortMalloc+0x174>
	return pvReturn;
 800965a:	69fb      	ldr	r3, [r7, #28]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3728      	adds	r7, #40	; 0x28
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20005404 	.word	0x20005404
 8009668:	20005410 	.word	0x20005410
 800966c:	20005408 	.word	0x20005408
 8009670:	200053fc 	.word	0x200053fc
 8009674:	2000540c 	.word	0x2000540c

08009678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04c      	beq.n	8009724 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800968a:	2308      	movs	r3, #8
 800968c:	425b      	negs	r3, r3
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b23      	ldr	r3, [pc, #140]	; (800972c <vPortFree+0xb4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10c      	bne.n	80096c0 <vPortFree+0x48>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	b672      	cpsid	i
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	b662      	cpsie	i
 80096ba:	60fb      	str	r3, [r7, #12]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00c      	beq.n	80096e2 <vPortFree+0x6a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	b672      	cpsid	i
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	b662      	cpsie	i
 80096dc:	60bb      	str	r3, [r7, #8]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <vPortFree+0xb4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d019      	beq.n	8009724 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d115      	bne.n	8009724 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <vPortFree+0xb4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	43db      	mvns	r3, r3
 8009702:	401a      	ands	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009708:	f7fe fb72 	bl	8007df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <vPortFree+0xb8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4413      	add	r3, r2
 8009716:	4a06      	ldr	r2, [pc, #24]	; (8009730 <vPortFree+0xb8>)
 8009718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800971a:	6938      	ldr	r0, [r7, #16]
 800971c:	f000 f86c 	bl	80097f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009720:	f7fe fb74 	bl	8007e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009724:	bf00      	nop
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20005410 	.word	0x20005410
 8009730:	20005408 	.word	0x20005408

08009734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800973a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800973e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009740:	4b27      	ldr	r3, [pc, #156]	; (80097e0 <prvHeapInit+0xac>)
 8009742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0307 	bic.w	r3, r3, #7
 800975a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	4a1f      	ldr	r2, [pc, #124]	; (80097e0 <prvHeapInit+0xac>)
 8009764:	4413      	add	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800976c:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <prvHeapInit+0xb0>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009772:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <prvHeapInit+0xb0>)
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4413      	add	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009780:	2208      	movs	r2, #8
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0307 	bic.w	r3, r3, #7
 800978e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <prvHeapInit+0xb4>)
 8009794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <prvHeapInit+0xb4>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800979e:	4b12      	ldr	r3, [pc, #72]	; (80097e8 <prvHeapInit+0xb4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097b4:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <prvHeapInit+0xb4>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	4a0a      	ldr	r2, [pc, #40]	; (80097ec <prvHeapInit+0xb8>)
 80097c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <prvHeapInit+0xbc>)
 80097ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <prvHeapInit+0xc0>)
 80097ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097d2:	601a      	str	r2, [r3, #0]
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	200017fc 	.word	0x200017fc
 80097e4:	200053fc 	.word	0x200053fc
 80097e8:	20005404 	.word	0x20005404
 80097ec:	2000540c 	.word	0x2000540c
 80097f0:	20005408 	.word	0x20005408
 80097f4:	20005410 	.word	0x20005410

080097f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009800:	4b28      	ldr	r3, [pc, #160]	; (80098a4 <prvInsertBlockIntoFreeList+0xac>)
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e002      	b.n	800980c <prvInsertBlockIntoFreeList+0x14>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	429a      	cmp	r2, r3
 8009814:	d8f7      	bhi.n	8009806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4413      	add	r3, r2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	d108      	bne.n	800983a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	441a      	add	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	441a      	add	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d118      	bne.n	8009880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d00d      	beq.n	8009876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	441a      	add	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e008      	b.n	8009888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e003      	b.n	8009888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d002      	beq.n	8009896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200053fc 	.word	0x200053fc
 80098a8:	20005404 	.word	0x20005404

080098ac <memset>:
 80098ac:	4402      	add	r2, r0
 80098ae:	4603      	mov	r3, r0
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d100      	bne.n	80098b6 <memset+0xa>
 80098b4:	4770      	bx	lr
 80098b6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ba:	e7f9      	b.n	80098b0 <memset+0x4>

080098bc <_reclaim_reent>:
 80098bc:	4b29      	ldr	r3, [pc, #164]	; (8009964 <_reclaim_reent+0xa8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4283      	cmp	r3, r0
 80098c2:	b570      	push	{r4, r5, r6, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	d04b      	beq.n	8009960 <_reclaim_reent+0xa4>
 80098c8:	69c3      	ldr	r3, [r0, #28]
 80098ca:	b143      	cbz	r3, 80098de <_reclaim_reent+0x22>
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d144      	bne.n	800995c <_reclaim_reent+0xa0>
 80098d2:	69e3      	ldr	r3, [r4, #28]
 80098d4:	6819      	ldr	r1, [r3, #0]
 80098d6:	b111      	cbz	r1, 80098de <_reclaim_reent+0x22>
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 f879 	bl	80099d0 <_free_r>
 80098de:	6961      	ldr	r1, [r4, #20]
 80098e0:	b111      	cbz	r1, 80098e8 <_reclaim_reent+0x2c>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f874 	bl	80099d0 <_free_r>
 80098e8:	69e1      	ldr	r1, [r4, #28]
 80098ea:	b111      	cbz	r1, 80098f2 <_reclaim_reent+0x36>
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f86f 	bl	80099d0 <_free_r>
 80098f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80098f4:	b111      	cbz	r1, 80098fc <_reclaim_reent+0x40>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f86a 	bl	80099d0 <_free_r>
 80098fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098fe:	b111      	cbz	r1, 8009906 <_reclaim_reent+0x4a>
 8009900:	4620      	mov	r0, r4
 8009902:	f000 f865 	bl	80099d0 <_free_r>
 8009906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009908:	b111      	cbz	r1, 8009910 <_reclaim_reent+0x54>
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f860 	bl	80099d0 <_free_r>
 8009910:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009912:	b111      	cbz	r1, 800991a <_reclaim_reent+0x5e>
 8009914:	4620      	mov	r0, r4
 8009916:	f000 f85b 	bl	80099d0 <_free_r>
 800991a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800991c:	b111      	cbz	r1, 8009924 <_reclaim_reent+0x68>
 800991e:	4620      	mov	r0, r4
 8009920:	f000 f856 	bl	80099d0 <_free_r>
 8009924:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009926:	b111      	cbz	r1, 800992e <_reclaim_reent+0x72>
 8009928:	4620      	mov	r0, r4
 800992a:	f000 f851 	bl	80099d0 <_free_r>
 800992e:	6a23      	ldr	r3, [r4, #32]
 8009930:	b1b3      	cbz	r3, 8009960 <_reclaim_reent+0xa4>
 8009932:	4620      	mov	r0, r4
 8009934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009938:	4718      	bx	r3
 800993a:	5949      	ldr	r1, [r1, r5]
 800993c:	b941      	cbnz	r1, 8009950 <_reclaim_reent+0x94>
 800993e:	3504      	adds	r5, #4
 8009940:	69e3      	ldr	r3, [r4, #28]
 8009942:	2d80      	cmp	r5, #128	; 0x80
 8009944:	68d9      	ldr	r1, [r3, #12]
 8009946:	d1f8      	bne.n	800993a <_reclaim_reent+0x7e>
 8009948:	4620      	mov	r0, r4
 800994a:	f000 f841 	bl	80099d0 <_free_r>
 800994e:	e7c0      	b.n	80098d2 <_reclaim_reent+0x16>
 8009950:	680e      	ldr	r6, [r1, #0]
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f83c 	bl	80099d0 <_free_r>
 8009958:	4631      	mov	r1, r6
 800995a:	e7ef      	b.n	800993c <_reclaim_reent+0x80>
 800995c:	2500      	movs	r5, #0
 800995e:	e7ef      	b.n	8009940 <_reclaim_reent+0x84>
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	bf00      	nop
 8009964:	2000006c 	.word	0x2000006c

08009968 <__libc_init_array>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4d0d      	ldr	r5, [pc, #52]	; (80099a0 <__libc_init_array+0x38>)
 800996c:	4c0d      	ldr	r4, [pc, #52]	; (80099a4 <__libc_init_array+0x3c>)
 800996e:	1b64      	subs	r4, r4, r5
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	2600      	movs	r6, #0
 8009974:	42a6      	cmp	r6, r4
 8009976:	d109      	bne.n	800998c <__libc_init_array+0x24>
 8009978:	4d0b      	ldr	r5, [pc, #44]	; (80099a8 <__libc_init_array+0x40>)
 800997a:	4c0c      	ldr	r4, [pc, #48]	; (80099ac <__libc_init_array+0x44>)
 800997c:	f000 f880 	bl	8009a80 <_init>
 8009980:	1b64      	subs	r4, r4, r5
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	2600      	movs	r6, #0
 8009986:	42a6      	cmp	r6, r4
 8009988:	d105      	bne.n	8009996 <__libc_init_array+0x2e>
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009990:	4798      	blx	r3
 8009992:	3601      	adds	r6, #1
 8009994:	e7ee      	b.n	8009974 <__libc_init_array+0xc>
 8009996:	f855 3b04 	ldr.w	r3, [r5], #4
 800999a:	4798      	blx	r3
 800999c:	3601      	adds	r6, #1
 800999e:	e7f2      	b.n	8009986 <__libc_init_array+0x1e>
 80099a0:	08009b88 	.word	0x08009b88
 80099a4:	08009b88 	.word	0x08009b88
 80099a8:	08009b88 	.word	0x08009b88
 80099ac:	08009b8c 	.word	0x08009b8c

080099b0 <__retarget_lock_acquire_recursive>:
 80099b0:	4770      	bx	lr

080099b2 <__retarget_lock_release_recursive>:
 80099b2:	4770      	bx	lr

080099b4 <memcpy>:
 80099b4:	440a      	add	r2, r1
 80099b6:	4291      	cmp	r1, r2
 80099b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80099bc:	d100      	bne.n	80099c0 <memcpy+0xc>
 80099be:	4770      	bx	lr
 80099c0:	b510      	push	{r4, lr}
 80099c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ca:	4291      	cmp	r1, r2
 80099cc:	d1f9      	bne.n	80099c2 <memcpy+0xe>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <_free_r>:
 80099d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d2:	2900      	cmp	r1, #0
 80099d4:	d044      	beq.n	8009a60 <_free_r+0x90>
 80099d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099da:	9001      	str	r0, [sp, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f1a1 0404 	sub.w	r4, r1, #4
 80099e2:	bfb8      	it	lt
 80099e4:	18e4      	addlt	r4, r4, r3
 80099e6:	f000 f83f 	bl	8009a68 <__malloc_lock>
 80099ea:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <_free_r+0x94>)
 80099ec:	9801      	ldr	r0, [sp, #4]
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b933      	cbnz	r3, 8009a00 <_free_r+0x30>
 80099f2:	6063      	str	r3, [r4, #4]
 80099f4:	6014      	str	r4, [r2, #0]
 80099f6:	b003      	add	sp, #12
 80099f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099fc:	f000 b83a 	b.w	8009a74 <__malloc_unlock>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d908      	bls.n	8009a16 <_free_r+0x46>
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	1961      	adds	r1, r4, r5
 8009a08:	428b      	cmp	r3, r1
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6819      	ldreq	r1, [r3, #0]
 8009a0e:	685b      	ldreq	r3, [r3, #4]
 8009a10:	1949      	addeq	r1, r1, r5
 8009a12:	6021      	streq	r1, [r4, #0]
 8009a14:	e7ed      	b.n	80099f2 <_free_r+0x22>
 8009a16:	461a      	mov	r2, r3
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b10b      	cbz	r3, 8009a20 <_free_r+0x50>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x46>
 8009a20:	6811      	ldr	r1, [r2, #0]
 8009a22:	1855      	adds	r5, r2, r1
 8009a24:	42a5      	cmp	r5, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x70>
 8009a28:	6824      	ldr	r4, [r4, #0]
 8009a2a:	4421      	add	r1, r4
 8009a2c:	1854      	adds	r4, r2, r1
 8009a2e:	42a3      	cmp	r3, r4
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	d1e0      	bne.n	80099f6 <_free_r+0x26>
 8009a34:	681c      	ldr	r4, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	6053      	str	r3, [r2, #4]
 8009a3a:	440c      	add	r4, r1
 8009a3c:	6014      	str	r4, [r2, #0]
 8009a3e:	e7da      	b.n	80099f6 <_free_r+0x26>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x78>
 8009a42:	230c      	movs	r3, #12
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	e7d6      	b.n	80099f6 <_free_r+0x26>
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf04      	itt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	bf04      	itt	eq
 8009a58:	1949      	addeq	r1, r1, r5
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	6054      	str	r4, [r2, #4]
 8009a5e:	e7ca      	b.n	80099f6 <_free_r+0x26>
 8009a60:	b003      	add	sp, #12
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	20005550 	.word	0x20005550

08009a68 <__malloc_lock>:
 8009a68:	4801      	ldr	r0, [pc, #4]	; (8009a70 <__malloc_lock+0x8>)
 8009a6a:	f7ff bfa1 	b.w	80099b0 <__retarget_lock_acquire_recursive>
 8009a6e:	bf00      	nop
 8009a70:	2000554c 	.word	0x2000554c

08009a74 <__malloc_unlock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	; (8009a7c <__malloc_unlock+0x8>)
 8009a76:	f7ff bf9c 	b.w	80099b2 <__retarget_lock_release_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	2000554c 	.word	0x2000554c

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
